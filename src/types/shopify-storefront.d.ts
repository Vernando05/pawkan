/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * The schema’s entry-point for queries. This acts as the public, top-level API from which all queries must start.
 */
export interface QueryRoot {
  
  /**
   * List of the shop's articles.
   */
  articles: ArticleConnection;
  
  /**
   * Find a blog by its handle.
   */
  blogByHandle?: Blog;
  
  /**
   * List of the shop's blogs.
   */
  blogs: BlogConnection;
  
  /**
   * Find a collection by its handle.
   */
  collectionByHandle?: Collection;
  
  /**
   * List of the shop’s collections.
   */
  collections: CollectionConnection;
  
  /**
   * Find a customer by its access token.
   */
  customer?: Customer;
  node?: Node;
  nodes: Array<Node | null>;
  
  /**
   * Find a page by its handle.
   */
  pageByHandle?: Page;
  
  /**
   * List of the shop's pages.
   */
  pages: PageConnection;
  
  /**
   * Find a product by its handle.
   */
  productByHandle?: Product;
  
  /**
   * Find recommended products related to a given `product_id`.
   * To learn more about how recommendations are generated, see
   * [*Showing product recommendations on product pages*](https://help.shopify.com/themes/development/recommended-products).
   * 
   */
  productRecommendations?: Array<Product>;
  
  /**
   * Tags added to products.
   * Additional access scope required: unauthenticated_read_product_tags.
   * 
   */
  productTags: StringConnection;
  
  /**
   * List of product types for the shop's products that are published to your app.
   */
  productTypes: StringConnection;
  
  /**
   * List of the shop’s products.
   */
  products: ProductConnection;
  
  /**
   * The list of public Storefront API versions, including supported, release candidate and unstable versions.
   */
  publicApiVersions: Array<ApiVersion>;
  
  /**
   * The shop associated with the storefront access token.
   */
  shop: Shop;
}

/**
 * The set of valid sort keys for the Article query.
 */
export const enum ArticleSortKeys {
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `blog_title` value.
   */
  BLOG_TITLE = 'BLOG_TITLE',
  
  /**
   * Sort by the `author` value.
   */
  AUTHOR = 'AUTHOR',
  
  /**
   * Sort by the `updated_at` value.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Sort by the `published_at` value.
   */
  PUBLISHED_AT = 'PUBLISHED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
   * results by relevance to the search term(s). When no search query is specified, this sort key is not
   * deterministic and should not be used.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple Articles.
 * 
 */
export interface ArticleConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ArticleEdge>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Article and a cursor during pagination.
 * 
 */
export interface ArticleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ArticleEdge.
   */
  node: Article;
}

/**
 * An article in an online store blog.
 */
export interface Article extends Node {
  
  /**
   * The article's author.
   * @deprecated Use `authorV2` instead
   */
  author: ArticleAuthor;
  
  /**
   * The article's author.
   */
  authorV2?: ArticleAuthor;
  
  /**
   * The blog that the article belongs to.
   */
  blog: Blog;
  
  /**
   * List of comments posted on the article.
   */
  comments: CommentConnection;
  
  /**
   * Stripped content of the article, single line with HTML tags removed.
   */
  content: string;
  
  /**
   * The content of the article, complete with HTML formatting.
   */
  contentHtml: HTML;
  
  /**
   * Stripped excerpt of the article, single line with HTML tags removed.
   */
  excerpt?: string;
  
  /**
   * The excerpt of the article, complete with HTML formatting.
   */
  excerptHtml?: HTML;
  
  /**
   * A human-friendly unique string for the Article automatically generated from its title.
   * 
   */
  handle: string;
  
  /**
   * Globally unique identifier.
   */
  id: string;
  
  /**
   * The image associated with the article.
   */
  image?: Image;
  
  /**
   * The date and time when the article was published.
   */
  publishedAt: DateTime;
  
  /**
   * The article’s SEO information.
   */
  seo?: SEO;
  
  /**
   * A categorization that a article can be tagged with.
   */
  tags: Array<string>;
  
  /**
   * The article’s name.
   */
  title: string;
  
  /**
   * The url pointing to the article accessible from the web.
   */
  url: URL;
}

/**
 * An object with an ID to support global identification.
 */
export interface Node {
  
  /**
   * Globally unique identifier.
   */
  id: string;
}

/** Use this to resolve interface type Node */
export type PossibleNodeTypeNames =
'Article' |
'Blog' |
'Comment' |
'Collection' |
'Product' |
'Metafield' |
'ProductVariant' |
'ProductOption' |
'MailingAddress' |
'Checkout' |
'AppliedGiftCard' |
'CheckoutLineItem' |
'Order' |
'Page' |
'ShopPolicy' |
'Payment' |
'ExternalVideo' |
'MediaImage' |
'Model3d' |
'Video';

export interface NodeNameMap {
  Node: Node;
  Article: Article;
  Blog: Blog;
  Comment: Comment;
  Collection: Collection;
  Product: Product;
  Metafield: Metafield;
  ProductVariant: ProductVariant;
  ProductOption: ProductOption;
  MailingAddress: MailingAddress;
  Checkout: Checkout;
  AppliedGiftCard: AppliedGiftCard;
  CheckoutLineItem: CheckoutLineItem;
  Order: Order;
  Page: Page;
  ShopPolicy: ShopPolicy;
  Payment: Payment;
  ExternalVideo: ExternalVideo;
  MediaImage: MediaImage;
  Model3d: Model3d;
  Video: Video;
}

/**
 * The author of an article.
 */
export interface ArticleAuthor {
  
  /**
   * The author's bio.
   */
  bio?: string;
  
  /**
   * The author’s email.
   */
  email: string;
  
  /**
   * The author's first name.
   */
  firstName: string;
  
  /**
   * The author's last name.
   */
  lastName: string;
  
  /**
   * The author's full name.
   */
  name: string;
}

/**
 * An online store blog.
 */
export interface Blog extends Node {
  
  /**
   * Find an article by its handle.
   */
  articleByHandle?: Article;
  
  /**
   * List of the blog's articles.
   */
  articles: ArticleConnection;
  
  /**
   * The authors who have contributed to the blog.
   */
  authors: Array<ArticleAuthor>;
  
  /**
   * A human-friendly unique string for the Blog automatically generated from its title.
   * 
   */
  handle: string;
  
  /**
   * Globally unique identifier.
   */
  id: string;
  
  /**
   * The blog's SEO information.
   */
  seo?: SEO;
  
  /**
   * The blogs’s title.
   */
  title: string;
  
  /**
   * The url pointing to the blog accessible from the web.
   */
  url: URL;
}

/**
 * SEO information.
 */
export interface SEO {
  
  /**
   * The meta description.
   */
  description?: string;
  
  /**
   * The SEO title.
   */
  title?: string;
}

/**
 * An RFC 3986 and RFC 3987 compliant URI string.
 * 
 * Example value: `"https://johns-apparel.myshopify.com"`.
 * 
 */
export type URL = any;

/**
 * An auto-generated type for paginating through multiple Comments.
 * 
 */
export interface CommentConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CommentEdge>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Comment and a cursor during pagination.
 * 
 */
export interface CommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CommentEdge.
   */
  node: Comment;
}

/**
 * A comment on an article.
 */
export interface Comment extends Node {
  
  /**
   * The comment’s author.
   */
  author: CommentAuthor;
  
  /**
   * Stripped content of the comment, single line with HTML tags removed.
   */
  content: string;
  
  /**
   * The content of the comment, complete with HTML formatting.
   */
  contentHtml: HTML;
  
  /**
   * Globally unique identifier.
   */
  id: string;
}

/**
 * The author of a comment.
 */
export interface CommentAuthor {
  
  /**
   * The author's email.
   */
  email: string;
  
  /**
   * The author’s name.
   */
  name: string;
}

/**
 * A string containing HTML code. Example value: `"<p>Grey cotton knit sweater.</p>"`.
 */
export type HTML = any;

/**
 * Information about pagination in a connection.
 */
export interface PageInfo {
  
  /**
   * Indicates if there are more pages to fetch.
   */
  hasNextPage: boolean;
  
  /**
   * Indicates if there are any pages prior to the current page.
   */
  hasPreviousPage: boolean;
}

/**
 * The part of the image that should remain after cropping.
 */
export const enum CropRegion {
  
  /**
   * Keep the center of the image.
   */
  CENTER = 'CENTER',
  
  /**
   * Keep the top of the image.
   */
  TOP = 'TOP',
  
  /**
   * Keep the bottom of the image.
   */
  BOTTOM = 'BOTTOM',
  
  /**
   * Keep the left of the image.
   */
  LEFT = 'LEFT',
  
  /**
   * Keep the right of the image.
   */
  RIGHT = 'RIGHT'
}

/**
 * Represents an image resource.
 */
export interface Image {
  
  /**
   * A word or phrase to share the nature or contents of an image.
   */
  altText?: string;
  
  /**
   * The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
   */
  height?: number;
  
  /**
   * A unique identifier for the image.
   */
  id?: string;
  
  /**
   * The location of the original image as a URL.
   * 
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * 
   */
  originalSrc: URL;
  
  /**
   * The location of the image as a URL.
   * @deprecated Previously an image had a single `src` field. This could either return the original image
   * location or a URL that contained transformations such as sizing or scale.
   * 
   * These transformations were specified by arguments on the parent field.
   * 
   * Now an image has two distinct URL fields: `originalSrc` and `transformedSrc`.
   * 
   * * `originalSrc` - the original unmodified image URL
   * * `transformedSrc` - the image URL with the specified transformations included
   * 
   * To migrate to the new fields, image transformations should be moved from the parent field to `transformedSrc`.
   * 
   * Before:
   * ```graphql
   * {
     *   shop {
       *     productImages(maxWidth: 200, scale: 2) {
         *       edges {
           *         node {
             *           src
           *         }
         *       }
       *     }
     *   }
   * }
   * ```
   * 
   * After:
   * ```graphql
   * {
     *   shop {
       *     productImages {
         *       edges {
           *         node {
             *           transformedSrc(maxWidth: 200, scale: 2)
           *         }
         *       }
       *     }
     *   }
   * }
   * ```
   * 
   */
  src: URL;
  
  /**
   * The location of the transformed image as a URL.
   * 
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type does not support will be ignored.
   * 
   */
  transformedSrc: URL;
  
  /**
   * The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
   */
  width?: number;
}

/**
 * List of supported image content types.
 */
export const enum ImageContentType {
  
  /**
   * A PNG image.
   */
  PNG = 'PNG',
  
  /**
   * A JPG image.
   */
  JPG = 'JPG',
  
  /**
   * A WEBP image.
   */
  WEBP = 'WEBP'
}

/**
 * An ISO-8601 encoded UTC date time string. Example value: `"2019-07-03T20:47:55Z"`.
 */
export type DateTime = any;

/**
 * The set of valid sort keys for the Blog query.
 */
export const enum BlogSortKeys {
  
  /**
   * Sort by the `handle` value.
   */
  HANDLE = 'HANDLE',
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
   * results by relevance to the search term(s). When no search query is specified, this sort key is not
   * deterministic and should not be used.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple Blogs.
 * 
 */
export interface BlogConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<BlogEdge>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Blog and a cursor during pagination.
 * 
 */
export interface BlogEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of BlogEdge.
   */
  node: Blog;
}

/**
 * A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse.
 */
export interface Collection extends Node {
  
  /**
   * Stripped description of the collection, single line with HTML tags removed.
   */
  description: string;
  
  /**
   * The description of the collection, complete with HTML formatting.
   */
  descriptionHtml: HTML;
  
  /**
   * A human-friendly unique string for the collection automatically generated from its title.
   * Limit of 255 characters.
   * 
   */
  handle: string;
  
  /**
   * Globally unique identifier.
   */
  id: string;
  
  /**
   * Image associated with the collection.
   */
  image?: Image;
  
  /**
   * List of products in the collection.
   */
  products: ProductConnection;
  
  /**
   * The collection’s name. Limit of 255 characters.
   */
  title: string;
  
  /**
   * The date and time when the collection was last modified.
   */
  updatedAt: DateTime;
}

/**
 * The set of valid sort keys for the ProductCollection query.
 */
export const enum ProductCollectionSortKeys {
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `price` value.
   */
  PRICE = 'PRICE',
  
  /**
   * Sort by the `best-selling` value.
   */
  BEST_SELLING = 'BEST_SELLING',
  
  /**
   * Sort by the `created` value.
   */
  CREATED = 'CREATED',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by the `manual` value.
   */
  MANUAL = 'MANUAL',
  
  /**
   * Sort by the `collection-default` value.
   */
  COLLECTION_DEFAULT = 'COLLECTION_DEFAULT',
  
  /**
   * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
   * results by relevance to the search term(s). When no search query is specified, this sort key is not
   * deterministic and should not be used.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple Products.
 * 
 */
export interface ProductConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ProductEdge>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Product and a cursor during pagination.
 * 
 */
export interface ProductEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ProductEdge.
   */
  node: Product;
}

/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export interface Product extends Node, HasMetafields {
  
  /**
   * Indicates if at least one product variant is available for sale.
   */
  availableForSale: boolean;
  
  /**
   * List of collections a product belongs to.
   */
  collections: CollectionConnection;
  
  /**
   * The compare at price of the product across all variants.
   */
  compareAtPriceRange: ProductPriceRange;
  
  /**
   * The date and time when the product was created.
   */
  createdAt: DateTime;
  
  /**
   * Stripped description of the product, single line with HTML tags removed.
   */
  description: string;
  
  /**
   * The description of the product, complete with HTML formatting.
   */
  descriptionHtml: HTML;
  
  /**
   * A human-friendly unique string for the Product automatically generated from its title.
   * They are used by the Liquid templating language to refer to objects.
   * 
   */
  handle: string;
  
  /**
   * Globally unique identifier.
   */
  id: string;
  
  /**
   * List of images associated with the product.
   */
  images: ImageConnection;
  
  /**
   * The media associated with the product.
   */
  media: MediaConnection;
  
  /**
   * The metafield associated with the resource.
   */
  metafield?: Metafield;
  
  /**
   * A paginated list of metafields associated with the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The online store URL for the product.
   * A value of `null` indicates that the product is not published to the Online Store sales channel.
   * 
   */
  onlineStoreUrl?: URL;
  
  /**
   * List of product options.
   */
  options: Array<ProductOption>;
  
  /**
   * List of price ranges in the presentment currencies for this shop.
   */
  presentmentPriceRanges: ProductPriceRangeConnection;
  
  /**
   * The price range.
   */
  priceRange: ProductPriceRange;
  
  /**
   * A categorization that a product can be tagged with, commonly used for filtering and searching.
   */
  productType: string;
  
  /**
   * The date and time when the product was published to the channel.
   */
  publishedAt: DateTime;
  
  /**
   * The product's SEO information.
   */
  seo: SEO;
  
  /**
   * A comma separated list of tags that have been added to the product.
   * Additional access scope required for private apps: unauthenticated_read_product_tags.
   * 
   */
  tags: Array<string>;
  
  /**
   * The product’s title.
   */
  title: string;
  
  /**
   * The total quantity of inventory in stock for this Product.
   */
  totalInventory?: number;
  
  /**
   * The date and time when the product was last modified.
   * A product's `updatedAt` value can change for different reasons. For example, if an order
   * is placed for a product that has inventory tracking set up, then the inventory adjustment
   * is counted as an update.
   * 
   */
  updatedAt: DateTime;
  
  /**
   * Find a product’s variant based on its selected options.
   * This is useful for converting a user’s selection of product options into a single matching variant.
   * If there is not a variant for the selected options, `null` will be returned.
   * 
   */
  variantBySelectedOptions?: ProductVariant;
  
  /**
   * List of the product’s variants.
   */
  variants: ProductVariantConnection;
  
  /**
   * The product’s vendor name.
   */
  vendor: string;
}

/**
 * Represents information about the metafields associated to the specified resource.
 */
export interface HasMetafields {
  
  /**
   * The metafield associated with the resource.
   */
  metafield?: Metafield;
  
  /**
   * A paginated list of metafields associated with the resource.
   */
  metafields: MetafieldConnection;
}

/** Use this to resolve interface type HasMetafields */
export type PossibleHasMetafieldsTypeNames = 'Product' | 'ProductVariant';

export interface HasMetafieldsNameMap {
  HasMetafields: HasMetafields;
  Product: Product;
  ProductVariant: ProductVariant;
}

/**
 * Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
 * comprised of keys, values, and value types.
 * 
 */
export interface Metafield extends Node {
  
  /**
   * The date and time when the storefront metafield was created.
   */
  createdAt: DateTime;
  
  /**
   * The description of a metafield.
   */
  description?: string;
  
  /**
   * Globally unique identifier.
   */
  id: string;
  
  /**
   * The key name for a metafield.
   */
  key: string;
  
  /**
   * The namespace for a metafield.
   */
  namespace: string;
  
  /**
   * The parent object that the metafield belongs to.
   */
  parentResource: MetafieldParentResource;
  
  /**
   * The date and time when the storefront metafield was updated.
   */
  updatedAt: DateTime;
  
  /**
   * The value of a metafield.
   */
  value: string;
  
  /**
   * Represents the metafield value type.
   */
  valueType: MetafieldValueType;
}

/**
 * A resource that the metafield belongs to.
 */
export type MetafieldParentResource = Product | ProductVariant;

/** Use this to resolve union type MetafieldParentResource */
export type PossibleMetafieldParentResourceTypeNames =
'Product' |
'ProductVariant';

export interface MetafieldParentResourceNameMap {
  MetafieldParentResource: MetafieldParentResource;
  Product: Product;
  ProductVariant: ProductVariant;
}

/**
 * A product variant represents a different version of a product, such as differing sizes or differing colors.
 */
export interface ProductVariant extends Node, HasMetafields {
  
  /**
   * Indicates if the product variant is in stock.
   * @deprecated Use `availableForSale` instead
   */
  available?: boolean;
  
  /**
   * Indicates if the product variant is available for sale.
   */
  availableForSale: boolean;
  
  /**
   * The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPrice` is higher than `price`.
   * @deprecated Use `compareAtPriceV2` instead
   */
  compareAtPrice?: Money;
  
  /**
   * The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPriceV2` is higher than `priceV2`.
   */
  compareAtPriceV2?: MoneyV2;
  
  /**
   * Whether a product is out of stock but still available for purchase (used for backorders).
   */
  currentlyNotInStock: boolean;
  
  /**
   * Globally unique identifier.
   */
  id: string;
  
  /**
   * Image associated with the product variant. This field falls back to the product image if no image is available.
   */
  image?: Image;
  
  /**
   * The metafield associated with the resource.
   */
  metafield?: Metafield;
  
  /**
   * A paginated list of metafields associated with the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * List of prices and compare-at prices in the presentment currencies for this shop.
   */
  presentmentPrices: ProductVariantPricePairConnection;
  
  /**
   * List of unit prices in the presentment currencies for this shop.
   */
  presentmentUnitPrices: MoneyV2Connection;
  
  /**
   * The product variant’s price.
   * @deprecated Use `priceV2` instead
   */
  price: Money;
  
  /**
   * The product variant’s price.
   */
  priceV2: MoneyV2;
  
  /**
   * The product object that the product variant belongs to.
   */
  product: Product;
  
  /**
   * The total sellable quantity of the variant for online sales channels.
   */
  quantityAvailable?: number;
  
  /**
   * Whether a customer needs to provide a shipping address when placing an order for the product variant.
   */
  requiresShipping: boolean;
  
  /**
   * List of product options applied to the variant.
   */
  selectedOptions: Array<SelectedOption>;
  
  /**
   * The SKU (stock keeping unit) associated with the variant.
   */
  sku?: string;
  
  /**
   * The product variant’s title.
   */
  title: string;
  
  /**
   * The unit price value for the variant based on the variant's measurement.
   */
  unitPrice?: MoneyV2;
  
  /**
   * The unit price measurement for the variant.
   */
  unitPriceMeasurement?: UnitPriceMeasurement;
  
  /**
   * The weight of the product variant in the unit system specified with `weight_unit`.
   */
  weight?: number;
  
  /**
   * Unit of measurement for weight.
   */
  weightUnit: WeightUnit;
}

/**
 * A monetary value string. Example value: `"100.57"`.
 */
export type Money = any;

/**
 * A monetary value with currency.
 * 
 * To format currencies, combine this type's amount and currencyCode fields with your client's locale.
 * 
 * For example, in JavaScript you could use Intl.NumberFormat:
 * 
 * ```js
 * new Intl.NumberFormat(locale, {
   *   style: 'currency',
   *   currency: currencyCode
   * }).format(amount);
   * ```
   * 
   * Other formatting libraries include:
   * 
   * * iOS - [NumberFormatter](https://developer.apple.com/documentation/foundation/numberformatter)
   * * Android - [NumberFormat](https://developer.android.com/reference/java/text/NumberFormat.html)
   * * PHP - [NumberFormatter](http://php.net/manual/en/class.numberformatter.php)
   * 
   * For a more general solution, the [Unicode CLDR number formatting database] is available with many implementations
   * (such as [TwitterCldr](https://github.com/twitter/twitter-cldr-rb)).
   * 
   */
  export interface MoneyV2 {
    
    /**
     * Decimal money amount.
     */
    amount: Decimal;
    
    /**
     * Currency of the money.
     */
    currencyCode: CurrencyCode;
  }
  
  /**
   * A signed decimal number, which supports arbitrary precision and is serialized as a string. Example value: `"29.99"`.
   */
  export type Decimal = any;
  
  /**
   * Currency codes.
   */
  export const enum CurrencyCode {
    
    /**
     * United States Dollars (USD).
     */
    USD = 'USD',
    
    /**
     * Euro (EUR).
     */
    EUR = 'EUR',
    
    /**
     * United Kingdom Pounds (GBP).
     */
    GBP = 'GBP',
    
    /**
     * Canadian Dollars (CAD).
     */
    CAD = 'CAD',
    
    /**
     * Afghan Afghani (AFN).
     */
    AFN = 'AFN',
    
    /**
     * Albanian Lek (ALL).
     */
    ALL = 'ALL',
    
    /**
     * Algerian Dinar (DZD).
     */
    DZD = 'DZD',
    
    /**
     * Angolan Kwanza (AOA).
     */
    AOA = 'AOA',
    
    /**
     * Argentine Pesos (ARS).
     */
    ARS = 'ARS',
    
    /**
     * Armenian Dram (AMD).
     */
    AMD = 'AMD',
    
    /**
     * Aruban Florin (AWG).
     */
    AWG = 'AWG',
    
    /**
     * Australian Dollars (AUD).
     */
    AUD = 'AUD',
    
    /**
     * Barbadian Dollar (BBD).
     */
    BBD = 'BBD',
    
    /**
     * Azerbaijani Manat (AZN).
     */
    AZN = 'AZN',
    
    /**
     * Bangladesh Taka (BDT).
     */
    BDT = 'BDT',
    
    /**
     * Bahamian Dollar (BSD).
     */
    BSD = 'BSD',
    
    /**
     * Bahraini Dinar (BHD).
     */
    BHD = 'BHD',
    
    /**
     * Burundian Franc (BIF).
     */
    BIF = 'BIF',
    
    /**
     * Belarusian Ruble (BYN).
     */
    BYN = 'BYN',
    
    /**
     * Belarusian Ruble (BYR).
     * @deprecated `BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.
     */
    BYR = 'BYR',
    
    /**
     * Belize Dollar (BZD).
     */
    BZD = 'BZD',
    
    /**
     * Bermudian Dollar (BMD).
     */
    BMD = 'BMD',
    
    /**
     * Bhutanese Ngultrum (BTN).
     */
    BTN = 'BTN',
    
    /**
     * Bosnia and Herzegovina Convertible Mark (BAM).
     */
    BAM = 'BAM',
    
    /**
     * Brazilian Real (BRL).
     */
    BRL = 'BRL',
    
    /**
     * Bolivian Boliviano (BOB).
     */
    BOB = 'BOB',
    
    /**
     * Botswana Pula (BWP).
     */
    BWP = 'BWP',
    
    /**
     * Brunei Dollar (BND).
     */
    BND = 'BND',
    
    /**
     * Bulgarian Lev (BGN).
     */
    BGN = 'BGN',
    
    /**
     * Burmese Kyat (MMK).
     */
    MMK = 'MMK',
    
    /**
     * Cambodian Riel.
     */
    KHR = 'KHR',
    
    /**
     * Cape Verdean escudo (CVE).
     */
    CVE = 'CVE',
    
    /**
     * Cayman Dollars (KYD).
     */
    KYD = 'KYD',
    
    /**
     * Central African CFA Franc (XAF).
     */
    XAF = 'XAF',
    
    /**
     * Chilean Peso (CLP).
     */
    CLP = 'CLP',
    
    /**
     * Chinese Yuan Renminbi (CNY).
     */
    CNY = 'CNY',
    
    /**
     * Colombian Peso (COP).
     */
    COP = 'COP',
    
    /**
     * Comorian Franc (KMF).
     */
    KMF = 'KMF',
    
    /**
     * Congolese franc (CDF).
     */
    CDF = 'CDF',
    
    /**
     * Costa Rican Colones (CRC).
     */
    CRC = 'CRC',
    
    /**
     * Croatian Kuna (HRK).
     */
    HRK = 'HRK',
    
    /**
     * Czech Koruny (CZK).
     */
    CZK = 'CZK',
    
    /**
     * Danish Kroner (DKK).
     */
    DKK = 'DKK',
    
    /**
     * Djiboutian Franc (DJF).
     */
    DJF = 'DJF',
    
    /**
     * Dominican Peso (DOP).
     */
    DOP = 'DOP',
    
    /**
     * East Caribbean Dollar (XCD).
     */
    XCD = 'XCD',
    
    /**
     * Egyptian Pound (EGP).
     */
    EGP = 'EGP',
    
    /**
     * Eritrean Nakfa (ERN).
     */
    ERN = 'ERN',
    
    /**
     * Ethiopian Birr (ETB).
     */
    ETB = 'ETB',
    
    /**
     * Falkland Islands Pounds (FKP).
     */
    FKP = 'FKP',
    
    /**
     * CFP Franc (XPF).
     */
    XPF = 'XPF',
    
    /**
     * Fijian Dollars (FJD).
     */
    FJD = 'FJD',
    
    /**
     * Gibraltar Pounds (GIP).
     */
    GIP = 'GIP',
    
    /**
     * Gambian Dalasi (GMD).
     */
    GMD = 'GMD',
    
    /**
     * Ghanaian Cedi (GHS).
     */
    GHS = 'GHS',
    
    /**
     * Guatemalan Quetzal (GTQ).
     */
    GTQ = 'GTQ',
    
    /**
     * Guyanese Dollar (GYD).
     */
    GYD = 'GYD',
    
    /**
     * Georgian Lari (GEL).
     */
    GEL = 'GEL',
    
    /**
     * Guinean Franc (GNF).
     */
    GNF = 'GNF',
    
    /**
     * Haitian Gourde (HTG).
     */
    HTG = 'HTG',
    
    /**
     * Honduran Lempira (HNL).
     */
    HNL = 'HNL',
    
    /**
     * Hong Kong Dollars (HKD).
     */
    HKD = 'HKD',
    
    /**
     * Hungarian Forint (HUF).
     */
    HUF = 'HUF',
    
    /**
     * Icelandic Kronur (ISK).
     */
    ISK = 'ISK',
    
    /**
     * Indian Rupees (INR).
     */
    INR = 'INR',
    
    /**
     * Indonesian Rupiah (IDR).
     */
    IDR = 'IDR',
    
    /**
     * Israeli New Shekel (NIS).
     */
    ILS = 'ILS',
    
    /**
     * Iranian Rial (IRR).
     */
    IRR = 'IRR',
    
    /**
     * Iraqi Dinar (IQD).
     */
    IQD = 'IQD',
    
    /**
     * Jamaican Dollars (JMD).
     */
    JMD = 'JMD',
    
    /**
     * Japanese Yen (JPY).
     */
    JPY = 'JPY',
    
    /**
     * Jersey Pound.
     */
    JEP = 'JEP',
    
    /**
     * Jordanian Dinar (JOD).
     */
    JOD = 'JOD',
    
    /**
     * Kazakhstani Tenge (KZT).
     */
    KZT = 'KZT',
    
    /**
     * Kenyan Shilling (KES).
     */
    KES = 'KES',
    
    /**
     * Kiribati Dollar (KID).
     */
    KID = 'KID',
    
    /**
     * Kuwaiti Dinar (KWD).
     */
    KWD = 'KWD',
    
    /**
     * Kyrgyzstani Som (KGS).
     */
    KGS = 'KGS',
    
    /**
     * Laotian Kip (LAK).
     */
    LAK = 'LAK',
    
    /**
     * Latvian Lati (LVL).
     */
    LVL = 'LVL',
    
    /**
     * Lebanese Pounds (LBP).
     */
    LBP = 'LBP',
    
    /**
     * Lesotho Loti (LSL).
     */
    LSL = 'LSL',
    
    /**
     * Liberian Dollar (LRD).
     */
    LRD = 'LRD',
    
    /**
     * Libyan Dinar (LYD).
     */
    LYD = 'LYD',
    
    /**
     * Lithuanian Litai (LTL).
     */
    LTL = 'LTL',
    
    /**
     * Malagasy Ariary (MGA).
     */
    MGA = 'MGA',
    
    /**
     * Macedonia Denar (MKD).
     */
    MKD = 'MKD',
    
    /**
     * Macanese Pataca (MOP).
     */
    MOP = 'MOP',
    
    /**
     * Malawian Kwacha (MWK).
     */
    MWK = 'MWK',
    
    /**
     * Maldivian Rufiyaa (MVR).
     */
    MVR = 'MVR',
    
    /**
     * Mauritanian Ouguiya (MRU).
     */
    MRU = 'MRU',
    
    /**
     * Mexican Pesos (MXN).
     */
    MXN = 'MXN',
    
    /**
     * Malaysian Ringgits (MYR).
     */
    MYR = 'MYR',
    
    /**
     * Mauritian Rupee (MUR).
     */
    MUR = 'MUR',
    
    /**
     * Moldovan Leu (MDL).
     */
    MDL = 'MDL',
    
    /**
     * Moroccan Dirham.
     */
    MAD = 'MAD',
    
    /**
     * Mongolian Tugrik.
     */
    MNT = 'MNT',
    
    /**
     * Mozambican Metical.
     */
    MZN = 'MZN',
    
    /**
     * Namibian Dollar.
     */
    NAD = 'NAD',
    
    /**
     * Nepalese Rupee (NPR).
     */
    NPR = 'NPR',
    
    /**
     * Netherlands Antillean Guilder.
     */
    ANG = 'ANG',
    
    /**
     * New Zealand Dollars (NZD).
     */
    NZD = 'NZD',
    
    /**
     * Nicaraguan Córdoba (NIO).
     */
    NIO = 'NIO',
    
    /**
     * Nigerian Naira (NGN).
     */
    NGN = 'NGN',
    
    /**
     * Norwegian Kroner (NOK).
     */
    NOK = 'NOK',
    
    /**
     * Omani Rial (OMR).
     */
    OMR = 'OMR',
    
    /**
     * Panamian Balboa (PAB).
     */
    PAB = 'PAB',
    
    /**
     * Pakistani Rupee (PKR).
     */
    PKR = 'PKR',
    
    /**
     * Papua New Guinean Kina (PGK).
     */
    PGK = 'PGK',
    
    /**
     * Paraguayan Guarani (PYG).
     */
    PYG = 'PYG',
    
    /**
     * Peruvian Nuevo Sol (PEN).
     */
    PEN = 'PEN',
    
    /**
     * Philippine Peso (PHP).
     */
    PHP = 'PHP',
    
    /**
     * Polish Zlotych (PLN).
     */
    PLN = 'PLN',
    
    /**
     * Qatari Rial (QAR).
     */
    QAR = 'QAR',
    
    /**
     * Romanian Lei (RON).
     */
    RON = 'RON',
    
    /**
     * Russian Rubles (RUB).
     */
    RUB = 'RUB',
    
    /**
     * Rwandan Franc (RWF).
     */
    RWF = 'RWF',
    
    /**
     * Samoan Tala (WST).
     */
    WST = 'WST',
    
    /**
     * Saint Helena Pounds (SHP).
     */
    SHP = 'SHP',
    
    /**
     * Saudi Riyal (SAR).
     */
    SAR = 'SAR',
    
    /**
     * Sao Tome And Principe Dobra (STD).
     */
    STD = 'STD',
    
    /**
     * Serbian dinar (RSD).
     */
    RSD = 'RSD',
    
    /**
     * Seychellois Rupee (SCR).
     */
    SCR = 'SCR',
    
    /**
     * Sierra Leonean Leone (SLL).
     */
    SLL = 'SLL',
    
    /**
     * Singapore Dollars (SGD).
     */
    SGD = 'SGD',
    
    /**
     * Sudanese Pound (SDG).
     */
    SDG = 'SDG',
    
    /**
     * Somali Shilling (SOS).
     */
    SOS = 'SOS',
    
    /**
     * Syrian Pound (SYP).
     */
    SYP = 'SYP',
    
    /**
     * South African Rand (ZAR).
     */
    ZAR = 'ZAR',
    
    /**
     * South Korean Won (KRW).
     */
    KRW = 'KRW',
    
    /**
     * South Sudanese Pound (SSP).
     */
    SSP = 'SSP',
    
    /**
     * Solomon Islands Dollar (SBD).
     */
    SBD = 'SBD',
    
    /**
     * Sri Lankan Rupees (LKR).
     */
    LKR = 'LKR',
    
    /**
     * Surinamese Dollar (SRD).
     */
    SRD = 'SRD',
    
    /**
     * Swazi Lilangeni (SZL).
     */
    SZL = 'SZL',
    
    /**
     * Swedish Kronor (SEK).
     */
    SEK = 'SEK',
    
    /**
     * Swiss Francs (CHF).
     */
    CHF = 'CHF',
    
    /**
     * Taiwan Dollars (TWD).
     */
    TWD = 'TWD',
    
    /**
     * Thai baht (THB).
     */
    THB = 'THB',
    
    /**
     * Tajikistani Somoni (TJS).
     */
    TJS = 'TJS',
    
    /**
     * Tanzanian Shilling (TZS).
     */
    TZS = 'TZS',
    
    /**
     * Tongan Pa'anga (TOP).
     */
    TOP = 'TOP',
    
    /**
     * Trinidad and Tobago Dollars (TTD).
     */
    TTD = 'TTD',
    
    /**
     * Tunisian Dinar (TND).
     */
    TND = 'TND',
    
    /**
     * Turkish Lira (TRY).
     */
    TRY = 'TRY',
    
    /**
     * Turkmenistani Manat (TMT).
     */
    TMT = 'TMT',
    
    /**
     * Ugandan Shilling (UGX).
     */
    UGX = 'UGX',
    
    /**
     * Ukrainian Hryvnia (UAH).
     */
    UAH = 'UAH',
    
    /**
     * United Arab Emirates Dirham (AED).
     */
    AED = 'AED',
    
    /**
     * Uruguayan Pesos (UYU).
     */
    UYU = 'UYU',
    
    /**
     * Uzbekistan som (UZS).
     */
    UZS = 'UZS',
    
    /**
     * Vanuatu Vatu (VUV).
     */
    VUV = 'VUV',
    
    /**
     * Venezuelan Bolivares (VEF).
     * @deprecated `VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.
     */
    VEF = 'VEF',
    
    /**
     * Venezuelan Bolivares (VES).
     */
    VES = 'VES',
    
    /**
     * Vietnamese đồng (VND).
     */
    VND = 'VND',
    
    /**
     * West African CFA franc (XOF).
     */
    XOF = 'XOF',
    
    /**
     * Yemeni Rial (YER).
     */
    YER = 'YER',
    
    /**
     * Zambian Kwacha (ZMW).
     */
    ZMW = 'ZMW'
  }
  
  /**
   * An auto-generated type for paginating through multiple Metafields.
   * 
   */
  export interface MetafieldConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MetafieldEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Metafield and a cursor during pagination.
   * 
   */
  export interface MetafieldEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MetafieldEdge.
     */
    node: Metafield;
  }
  
  /**
   * An auto-generated type for paginating through multiple ProductVariantPricePairs.
   * 
   */
  export interface ProductVariantPricePairConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ProductVariantPricePairEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
   * 
   */
  export interface ProductVariantPricePairEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ProductVariantPricePairEdge.
     */
    node: ProductVariantPricePair;
  }
  
  /**
   * The compare-at price and price of a variant sharing a currency.
   * 
   */
  export interface ProductVariantPricePair {
    
    /**
     * The compare-at price of the variant with associated currency.
     */
    compareAtPrice?: MoneyV2;
    
    /**
     * The price of the variant with associated currency.
     */
    price: MoneyV2;
  }
  
  /**
   * An auto-generated type for paginating through multiple MoneyV2s.
   * 
   */
  export interface MoneyV2Connection {
    
    /**
     * A list of edges.
     */
    edges: Array<MoneyV2Edge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MoneyV2 and a cursor during pagination.
   * 
   */
  export interface MoneyV2Edge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MoneyV2Edge.
     */
    node: MoneyV2;
  }
  
  /**
   * Properties used by customers to select a product variant.
   * Products can have multiple options, like different sizes or colors.
   * 
   */
  export interface SelectedOption {
    
    /**
     * The product option’s name.
     */
    name: string;
    
    /**
     * The product option’s value.
     */
    value: string;
  }
  
  /**
   * The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml).
   * 
   */
  export interface UnitPriceMeasurement {
    
    /**
     * The type of unit of measurement for the unit price measurement.
     */
    measuredType?: UnitPriceMeasurementMeasuredType;
    
    /**
     * The quantity unit for the unit price measurement.
     */
    quantityUnit?: UnitPriceMeasurementMeasuredUnit;
    
    /**
     * The quantity value for the unit price measurement.
     */
    quantityValue: number;
    
    /**
     * The reference unit for the unit price measurement.
     */
    referenceUnit?: UnitPriceMeasurementMeasuredUnit;
    
    /**
     * The reference value for the unit price measurement.
     */
    referenceValue: number;
  }
  
  /**
   * The accepted types of unit of measurement.
   */
  export const enum UnitPriceMeasurementMeasuredType {
    
    /**
     * Unit of measurements representing volumes.
     */
    VOLUME = 'VOLUME',
    
    /**
     * Unit of measurements representing weights.
     */
    WEIGHT = 'WEIGHT',
    
    /**
     * Unit of measurements representing lengths.
     */
    LENGTH = 'LENGTH',
    
    /**
     * Unit of measurements representing areas.
     */
    AREA = 'AREA'
  }
  
  /**
   * The valid units of measurement for a unit price measurement.
   */
  export const enum UnitPriceMeasurementMeasuredUnit {
    
    /**
     * 1000 milliliters equals 1 liter.
     */
    ML = 'ML',
    
    /**
     * 100 centiliters equals 1 liter.
     */
    CL = 'CL',
    
    /**
     * Metric system unit of volume.
     */
    L = 'L',
    
    /**
     * 1 cubic meter equals 1000 liters.
     */
    M3 = 'M3',
    
    /**
     * 1000 milligrams equals 1 gram.
     */
    MG = 'MG',
    
    /**
     * Metric system unit of weight.
     */
    G = 'G',
    
    /**
     * 1 kilogram equals 1000 grams.
     */
    KG = 'KG',
    
    /**
     * 1000 millimeters equals 1 meter.
     */
    MM = 'MM',
    
    /**
     * 100 centimeters equals 1 meter.
     */
    CM = 'CM',
    
    /**
     * Metric system unit of length.
     */
    M = 'M',
    
    /**
     * Metric system unit of area.
     */
    M2 = 'M2'
  }
  
  /**
   * Units of measurement for weight.
   */
  export const enum WeightUnit {
    
    /**
     * 1 kilogram equals 1000 grams.
     */
    KILOGRAMS = 'KILOGRAMS',
    
    /**
     * Metric system unit of mass.
     */
    GRAMS = 'GRAMS',
    
    /**
     * 1 pound equals 16 ounces.
     */
    POUNDS = 'POUNDS',
    
    /**
     * Imperial system unit of mass.
     */
    OUNCES = 'OUNCES'
  }
  
  /**
   * Metafield value types.
   */
  export const enum MetafieldValueType {
    
    /**
     * A string metafield.
     */
    STRING = 'STRING',
    
    /**
     * An integer metafield.
     */
    INTEGER = 'INTEGER',
    
    /**
     * A json string metafield.
     */
    JSON_STRING = 'JSON_STRING'
  }
  
  /**
   * An auto-generated type for paginating through multiple Collections.
   * 
   */
  export interface CollectionConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CollectionEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Collection and a cursor during pagination.
   * 
   */
  export interface CollectionEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CollectionEdge.
     */
    node: Collection;
  }
  
  /**
   * The price range of the product.
   */
  export interface ProductPriceRange {
    
    /**
     * The highest variant's price.
     */
    maxVariantPrice: MoneyV2;
    
    /**
     * The lowest variant's price.
     */
    minVariantPrice: MoneyV2;
  }
  
  /**
   * The set of valid sort keys for the ProductImage query.
   */
  export const enum ProductImageSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `position` value.
     */
    POSITION = 'POSITION',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
     * results by relevance to the search term(s). When no search query is specified, this sort key is not
     * deterministic and should not be used.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Images.
   * 
   */
  export interface ImageConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ImageEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Image and a cursor during pagination.
   * 
   */
  export interface ImageEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ImageEdge.
     */
    node: Image;
  }
  
  /**
   * The set of valid sort keys for the ProductMedia query.
   */
  export const enum ProductMediaSortKeys {
    
    /**
     * Sort by the `position` value.
     */
    POSITION = 'POSITION',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
     * results by relevance to the search term(s). When no search query is specified, this sort key is not
     * deterministic and should not be used.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Media.
   * 
   */
  export interface MediaConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MediaEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Media and a cursor during pagination.
   * 
   */
  export interface MediaEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MediaEdge.
     */
    node: Media;
  }
  
  /**
   * Represents a media interface.
   */
  export interface Media {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * The preview image for the media.
     */
    previewImage?: Image;
  }
  
  /** Use this to resolve interface type Media */
  export type PossibleMediaTypeNames =
  'ExternalVideo' |
  'MediaImage' |
  'Model3d' |
  'Video';
  
  export interface MediaNameMap {
    Media: Media;
    ExternalVideo: ExternalVideo;
    MediaImage: MediaImage;
    Model3d: Model3d;
    Video: Video;
  }
  
  /**
   * The possible content types for a media object.
   */
  export const enum MediaContentType {
    
    /**
     * An externally hosted video.
     */
    EXTERNAL_VIDEO = 'EXTERNAL_VIDEO',
    
    /**
     * A Shopify hosted image.
     */
    IMAGE = 'IMAGE',
    
    /**
     * A 3d model.
     */
    MODEL_3D = 'MODEL_3D',
    
    /**
     * A Shopify hosted video.
     */
    VIDEO = 'VIDEO'
  }
  
  /**
   * Product property names like "Size", "Color", and "Material" that the customers can select.
   * Variants are selected based on permutations of these options.
   * 255 characters limit each.
   * 
   */
  export interface ProductOption extends Node {
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The product option’s name.
     */
    name: string;
    
    /**
     * The corresponding value to the product option name.
     */
    values: Array<string>;
  }
  
  /**
   * An auto-generated type for paginating through multiple ProductPriceRanges.
   * 
   */
  export interface ProductPriceRangeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ProductPriceRangeEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ProductPriceRange and a cursor during pagination.
   * 
   */
  export interface ProductPriceRangeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ProductPriceRangeEdge.
     */
    node: ProductPriceRange;
  }
  
  /**
   * Specifies the input fields required for a selected option.
   */
  export interface SelectedOptionInput {
    
    /**
     * The product option’s name.
     */
    name: string;
    
    /**
     * The product option’s value.
     */
    value: string;
  }
  
  /**
   * The set of valid sort keys for the ProductVariant query.
   */
  export const enum ProductVariantSortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `sku` value.
     */
    SKU = 'SKU',
    
    /**
     * Sort by the `position` value.
     */
    POSITION = 'POSITION',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
     * results by relevance to the search term(s). When no search query is specified, this sort key is not
     * deterministic and should not be used.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple ProductVariants.
   * 
   */
  export interface ProductVariantConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ProductVariantEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ProductVariant and a cursor during pagination.
   * 
   */
  export interface ProductVariantEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ProductVariantEdge.
     */
    node: ProductVariant;
  }
  
  /**
   * The set of valid sort keys for the Collection query.
   */
  export const enum CollectionSortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
     * results by relevance to the search term(s). When no search query is specified, this sort key is not
     * deterministic and should not be used.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout.
   */
  export interface Customer {
    
    /**
     * Indicates whether the customer has consented to be sent marketing material via email.
     */
    acceptsMarketing: boolean;
    
    /**
     * A list of addresses for the customer.
     */
    addresses: MailingAddressConnection;
    
    /**
     * The date and time when the customer was created.
     */
    createdAt: DateTime;
    
    /**
     * The customer’s default address.
     */
    defaultAddress?: MailingAddress;
    
    /**
     * The customer’s name, email or phone number.
     */
    displayName: string;
    
    /**
     * The customer’s email address.
     */
    email?: string;
    
    /**
     * The customer’s first name.
     */
    firstName?: string;
    
    /**
     * A unique identifier for the customer.
     */
    id: string;
    
    /**
     * The customer's most recently updated, incomplete checkout.
     */
    lastIncompleteCheckout?: Checkout;
    
    /**
     * The customer’s last name.
     */
    lastName?: string;
    
    /**
     * The orders associated with the customer.
     */
    orders: OrderConnection;
    
    /**
     * The customer’s phone number.
     */
    phone?: string;
    
    /**
     * A comma separated list of tags that have been added to the customer.
     * Additional access scope required: unauthenticated_read_customer_tags.
     * 
     */
    tags: Array<string>;
    
    /**
     * The date and time when the customer information was updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * An auto-generated type for paginating through multiple MailingAddresses.
   * 
   */
  export interface MailingAddressConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MailingAddressEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MailingAddress and a cursor during pagination.
   * 
   */
  export interface MailingAddressEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MailingAddressEdge.
     */
    node: MailingAddress;
  }
  
  /**
   * Represents a mailing address for customers and shipping.
   */
  export interface MailingAddress extends Node {
    
    /**
     * The first line of the address. Typically the street address or PO Box number.
     * 
     */
    address1?: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     * 
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     * 
     */
    city?: string;
    
    /**
     * The name of the customer's company or organization.
     * 
     */
    company?: string;
    
    /**
     * The name of the country.
     * 
     */
    country?: string;
    
    /**
     * The two-letter code for the country of the address.
     * 
     * For example, US.
     * 
     * @deprecated Use `countryCodeV2` instead
     */
    countryCode?: string;
    
    /**
     * The two-letter code for the country of the address.
     * 
     * For example, US.
     * 
     */
    countryCodeV2?: CountryCode;
    
    /**
     * The first name of the customer.
     */
    firstName?: string;
    
    /**
     * A formatted version of the address, customized by the provided arguments.
     */
    formatted: Array<string>;
    
    /**
     * A comma-separated list of the values for city, province, and country.
     */
    formattedArea?: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The last name of the customer.
     */
    lastName?: string;
    
    /**
     * The latitude coordinate of the customer address.
     */
    latitude?: number;
    
    /**
     * The longitude coordinate of the customer address.
     */
    longitude?: number;
    
    /**
     * The full name of the customer, based on firstName and lastName.
     * 
     */
    name?: string;
    
    /**
     * A unique phone number for the customer.
     * 
     * Formatted using E.164 standard. For example, _+16135551111_.
     * 
     */
    phone?: string;
    
    /**
     * The region of the address, such as the province, state, or district.
     */
    province?: string;
    
    /**
     * The two-letter code for the region.
     * 
     * For example, ON.
     * 
     */
    provinceCode?: string;
    
    /**
     * The zip or postal code of the address.
     */
    zip?: string;
  }
  
  /**
   * ISO 3166-1 alpha-2 country codes with some differences.
   */
  export const enum CountryCode {
    
    /**
     * Afghanistan.
     */
    AF = 'AF',
    
    /**
     * Åland Islands.
     */
    AX = 'AX',
    
    /**
     * Albania.
     */
    AL = 'AL',
    
    /**
     * Algeria.
     */
    DZ = 'DZ',
    
    /**
     * Andorra.
     */
    AD = 'AD',
    
    /**
     * Angola.
     */
    AO = 'AO',
    
    /**
     * Anguilla.
     */
    AI = 'AI',
    
    /**
     * Antigua & Barbuda.
     */
    AG = 'AG',
    
    /**
     * Argentina.
     */
    AR = 'AR',
    
    /**
     * Armenia.
     */
    AM = 'AM',
    
    /**
     * Aruba.
     */
    AW = 'AW',
    
    /**
     * Australia.
     */
    AU = 'AU',
    
    /**
     * Austria.
     */
    AT = 'AT',
    
    /**
     * Azerbaijan.
     */
    AZ = 'AZ',
    
    /**
     * Bahamas.
     */
    BS = 'BS',
    
    /**
     * Bahrain.
     */
    BH = 'BH',
    
    /**
     * Bangladesh.
     */
    BD = 'BD',
    
    /**
     * Barbados.
     */
    BB = 'BB',
    
    /**
     * Belarus.
     */
    BY = 'BY',
    
    /**
     * Belgium.
     */
    BE = 'BE',
    
    /**
     * Belize.
     */
    BZ = 'BZ',
    
    /**
     * Benin.
     */
    BJ = 'BJ',
    
    /**
     * Bermuda.
     */
    BM = 'BM',
    
    /**
     * Bhutan.
     */
    BT = 'BT',
    
    /**
     * Bolivia.
     */
    BO = 'BO',
    
    /**
     * Bosnia & Herzegovina.
     */
    BA = 'BA',
    
    /**
     * Botswana.
     */
    BW = 'BW',
    
    /**
     * Bouvet Island.
     */
    BV = 'BV',
    
    /**
     * Brazil.
     */
    BR = 'BR',
    
    /**
     * British Indian Ocean Territory.
     */
    IO = 'IO',
    
    /**
     * Brunei.
     */
    BN = 'BN',
    
    /**
     * Bulgaria.
     */
    BG = 'BG',
    
    /**
     * Burkina Faso.
     */
    BF = 'BF',
    
    /**
     * Burundi.
     */
    BI = 'BI',
    
    /**
     * Cambodia.
     */
    KH = 'KH',
    
    /**
     * Canada.
     */
    CA = 'CA',
    
    /**
     * Cape Verde.
     */
    CV = 'CV',
    
    /**
     * Caribbean Netherlands.
     */
    BQ = 'BQ',
    
    /**
     * Cayman Islands.
     */
    KY = 'KY',
    
    /**
     * Central African Republic.
     */
    CF = 'CF',
    
    /**
     * Chad.
     */
    TD = 'TD',
    
    /**
     * Chile.
     */
    CL = 'CL',
    
    /**
     * China.
     */
    CN = 'CN',
    
    /**
     * Christmas Island.
     */
    CX = 'CX',
    
    /**
     * Cocos (Keeling) Islands.
     */
    CC = 'CC',
    
    /**
     * Colombia.
     */
    CO = 'CO',
    
    /**
     * Comoros.
     */
    KM = 'KM',
    
    /**
     * Congo - Brazzaville.
     */
    CG = 'CG',
    
    /**
     * Congo - Kinshasa.
     */
    CD = 'CD',
    
    /**
     * Cook Islands.
     */
    CK = 'CK',
    
    /**
     * Costa Rica.
     */
    CR = 'CR',
    
    /**
     * Croatia.
     */
    HR = 'HR',
    
    /**
     * Cuba.
     */
    CU = 'CU',
    
    /**
     * Curaçao.
     */
    CW = 'CW',
    
    /**
     * Cyprus.
     */
    CY = 'CY',
    
    /**
     * Czechia.
     */
    CZ = 'CZ',
    
    /**
     * Côte d’Ivoire.
     */
    CI = 'CI',
    
    /**
     * Denmark.
     */
    DK = 'DK',
    
    /**
     * Djibouti.
     */
    DJ = 'DJ',
    
    /**
     * Dominica.
     */
    DM = 'DM',
    
    /**
     * Dominican Republic.
     */
    DO = 'DO',
    
    /**
     * Ecuador.
     */
    EC = 'EC',
    
    /**
     * Egypt.
     */
    EG = 'EG',
    
    /**
     * El Salvador.
     */
    SV = 'SV',
    
    /**
     * Equatorial Guinea.
     */
    GQ = 'GQ',
    
    /**
     * Eritrea.
     */
    ER = 'ER',
    
    /**
     * Estonia.
     */
    EE = 'EE',
    
    /**
     * Eswatini.
     */
    SZ = 'SZ',
    
    /**
     * Ethiopia.
     */
    ET = 'ET',
    
    /**
     * Falkland Islands.
     */
    FK = 'FK',
    
    /**
     * Faroe Islands.
     */
    FO = 'FO',
    
    /**
     * Fiji.
     */
    FJ = 'FJ',
    
    /**
     * Finland.
     */
    FI = 'FI',
    
    /**
     * France.
     */
    FR = 'FR',
    
    /**
     * French Guiana.
     */
    GF = 'GF',
    
    /**
     * French Polynesia.
     */
    PF = 'PF',
    
    /**
     * French Southern Territories.
     */
    TF = 'TF',
    
    /**
     * Gabon.
     */
    GA = 'GA',
    
    /**
     * Gambia.
     */
    GM = 'GM',
    
    /**
     * Georgia.
     */
    GE = 'GE',
    
    /**
     * Germany.
     */
    DE = 'DE',
    
    /**
     * Ghana.
     */
    GH = 'GH',
    
    /**
     * Gibraltar.
     */
    GI = 'GI',
    
    /**
     * Greece.
     */
    GR = 'GR',
    
    /**
     * Greenland.
     */
    GL = 'GL',
    
    /**
     * Grenada.
     */
    GD = 'GD',
    
    /**
     * Guadeloupe.
     */
    GP = 'GP',
    
    /**
     * Guatemala.
     */
    GT = 'GT',
    
    /**
     * Guernsey.
     */
    GG = 'GG',
    
    /**
     * Guinea.
     */
    GN = 'GN',
    
    /**
     * Guinea-Bissau.
     */
    GW = 'GW',
    
    /**
     * Guyana.
     */
    GY = 'GY',
    
    /**
     * Haiti.
     */
    HT = 'HT',
    
    /**
     * Heard & McDonald Islands.
     */
    HM = 'HM',
    
    /**
     * Vatican City.
     */
    VA = 'VA',
    
    /**
     * Honduras.
     */
    HN = 'HN',
    
    /**
     * Hong Kong SAR.
     */
    HK = 'HK',
    
    /**
     * Hungary.
     */
    HU = 'HU',
    
    /**
     * Iceland.
     */
    IS = 'IS',
    
    /**
     * India.
     */
    IN = 'IN',
    
    /**
     * Indonesia.
     */
    ID = 'ID',
    
    /**
     * Iran.
     */
    IR = 'IR',
    
    /**
     * Iraq.
     */
    IQ = 'IQ',
    
    /**
     * Ireland.
     */
    IE = 'IE',
    
    /**
     * Isle of Man.
     */
    IM = 'IM',
    
    /**
     * Israel.
     */
    IL = 'IL',
    
    /**
     * Italy.
     */
    IT = 'IT',
    
    /**
     * Jamaica.
     */
    JM = 'JM',
    
    /**
     * Japan.
     */
    JP = 'JP',
    
    /**
     * Jersey.
     */
    JE = 'JE',
    
    /**
     * Jordan.
     */
    JO = 'JO',
    
    /**
     * Kazakhstan.
     */
    KZ = 'KZ',
    
    /**
     * Kenya.
     */
    KE = 'KE',
    
    /**
     * Kiribati.
     */
    KI = 'KI',
    
    /**
     * North Korea.
     */
    KP = 'KP',
    
    /**
     * Kosovo.
     */
    XK = 'XK',
    
    /**
     * Kuwait.
     */
    KW = 'KW',
    
    /**
     * Kyrgyzstan.
     */
    KG = 'KG',
    
    /**
     * Laos.
     */
    LA = 'LA',
    
    /**
     * Latvia.
     */
    LV = 'LV',
    
    /**
     * Lebanon.
     */
    LB = 'LB',
    
    /**
     * Lesotho.
     */
    LS = 'LS',
    
    /**
     * Liberia.
     */
    LR = 'LR',
    
    /**
     * Libya.
     */
    LY = 'LY',
    
    /**
     * Liechtenstein.
     */
    LI = 'LI',
    
    /**
     * Lithuania.
     */
    LT = 'LT',
    
    /**
     * Luxembourg.
     */
    LU = 'LU',
    
    /**
     * Macao SAR.
     */
    MO = 'MO',
    
    /**
     * Madagascar.
     */
    MG = 'MG',
    
    /**
     * Malawi.
     */
    MW = 'MW',
    
    /**
     * Malaysia.
     */
    MY = 'MY',
    
    /**
     * Maldives.
     */
    MV = 'MV',
    
    /**
     * Mali.
     */
    ML = 'ML',
    
    /**
     * Malta.
     */
    MT = 'MT',
    
    /**
     * Martinique.
     */
    MQ = 'MQ',
    
    /**
     * Mauritania.
     */
    MR = 'MR',
    
    /**
     * Mauritius.
     */
    MU = 'MU',
    
    /**
     * Mayotte.
     */
    YT = 'YT',
    
    /**
     * Mexico.
     */
    MX = 'MX',
    
    /**
     * Moldova.
     */
    MD = 'MD',
    
    /**
     * Monaco.
     */
    MC = 'MC',
    
    /**
     * Mongolia.
     */
    MN = 'MN',
    
    /**
     * Montenegro.
     */
    ME = 'ME',
    
    /**
     * Montserrat.
     */
    MS = 'MS',
    
    /**
     * Morocco.
     */
    MA = 'MA',
    
    /**
     * Mozambique.
     */
    MZ = 'MZ',
    
    /**
     * Myanmar (Burma).
     */
    MM = 'MM',
    
    /**
     * Namibia.
     */
    NA = 'NA',
    
    /**
     * Nauru.
     */
    NR = 'NR',
    
    /**
     * Nepal.
     */
    NP = 'NP',
    
    /**
     * Netherlands.
     */
    NL = 'NL',
    
    /**
     * Netherlands Antilles.
     */
    AN = 'AN',
    
    /**
     * New Caledonia.
     */
    NC = 'NC',
    
    /**
     * New Zealand.
     */
    NZ = 'NZ',
    
    /**
     * Nicaragua.
     */
    NI = 'NI',
    
    /**
     * Niger.
     */
    NE = 'NE',
    
    /**
     * Nigeria.
     */
    NG = 'NG',
    
    /**
     * Niue.
     */
    NU = 'NU',
    
    /**
     * Norfolk Island.
     */
    NF = 'NF',
    
    /**
     * North Macedonia.
     */
    MK = 'MK',
    
    /**
     * Norway.
     */
    NO = 'NO',
    
    /**
     * Oman.
     */
    OM = 'OM',
    
    /**
     * Pakistan.
     */
    PK = 'PK',
    
    /**
     * Palestinian Territories.
     */
    PS = 'PS',
    
    /**
     * Panama.
     */
    PA = 'PA',
    
    /**
     * Papua New Guinea.
     */
    PG = 'PG',
    
    /**
     * Paraguay.
     */
    PY = 'PY',
    
    /**
     * Peru.
     */
    PE = 'PE',
    
    /**
     * Philippines.
     */
    PH = 'PH',
    
    /**
     * Pitcairn Islands.
     */
    PN = 'PN',
    
    /**
     * Poland.
     */
    PL = 'PL',
    
    /**
     * Portugal.
     */
    PT = 'PT',
    
    /**
     * Qatar.
     */
    QA = 'QA',
    
    /**
     * Cameroon.
     */
    CM = 'CM',
    
    /**
     * Réunion.
     */
    RE = 'RE',
    
    /**
     * Romania.
     */
    RO = 'RO',
    
    /**
     * Russia.
     */
    RU = 'RU',
    
    /**
     * Rwanda.
     */
    RW = 'RW',
    
    /**
     * St. Barthélemy.
     */
    BL = 'BL',
    
    /**
     * St. Helena.
     */
    SH = 'SH',
    
    /**
     * St. Kitts & Nevis.
     */
    KN = 'KN',
    
    /**
     * St. Lucia.
     */
    LC = 'LC',
    
    /**
     * St. Martin.
     */
    MF = 'MF',
    
    /**
     * St. Pierre & Miquelon.
     */
    PM = 'PM',
    
    /**
     * Samoa.
     */
    WS = 'WS',
    
    /**
     * San Marino.
     */
    SM = 'SM',
    
    /**
     * São Tomé & Príncipe.
     */
    ST = 'ST',
    
    /**
     * Saudi Arabia.
     */
    SA = 'SA',
    
    /**
     * Senegal.
     */
    SN = 'SN',
    
    /**
     * Serbia.
     */
    RS = 'RS',
    
    /**
     * Seychelles.
     */
    SC = 'SC',
    
    /**
     * Sierra Leone.
     */
    SL = 'SL',
    
    /**
     * Singapore.
     */
    SG = 'SG',
    
    /**
     * Sint Maarten.
     */
    SX = 'SX',
    
    /**
     * Slovakia.
     */
    SK = 'SK',
    
    /**
     * Slovenia.
     */
    SI = 'SI',
    
    /**
     * Solomon Islands.
     */
    SB = 'SB',
    
    /**
     * Somalia.
     */
    SO = 'SO',
    
    /**
     * South Africa.
     */
    ZA = 'ZA',
    
    /**
     * South Georgia & South Sandwich Islands.
     */
    GS = 'GS',
    
    /**
     * South Korea.
     */
    KR = 'KR',
    
    /**
     * South Sudan.
     */
    SS = 'SS',
    
    /**
     * Spain.
     */
    ES = 'ES',
    
    /**
     * Sri Lanka.
     */
    LK = 'LK',
    
    /**
     * St. Vincent & Grenadines.
     */
    VC = 'VC',
    
    /**
     * Sudan.
     */
    SD = 'SD',
    
    /**
     * Suriname.
     */
    SR = 'SR',
    
    /**
     * Svalbard & Jan Mayen.
     */
    SJ = 'SJ',
    
    /**
     * Sweden.
     */
    SE = 'SE',
    
    /**
     * Switzerland.
     */
    CH = 'CH',
    
    /**
     * Syria.
     */
    SY = 'SY',
    
    /**
     * Taiwan.
     */
    TW = 'TW',
    
    /**
     * Tajikistan.
     */
    TJ = 'TJ',
    
    /**
     * Tanzania.
     */
    TZ = 'TZ',
    
    /**
     * Thailand.
     */
    TH = 'TH',
    
    /**
     * Timor-Leste.
     */
    TL = 'TL',
    
    /**
     * Togo.
     */
    TG = 'TG',
    
    /**
     * Tokelau.
     */
    TK = 'TK',
    
    /**
     * Tonga.
     */
    TO = 'TO',
    
    /**
     * Trinidad & Tobago.
     */
    TT = 'TT',
    
    /**
     * Tunisia.
     */
    TN = 'TN',
    
    /**
     * Turkey.
     */
    TR = 'TR',
    
    /**
     * Turkmenistan.
     */
    TM = 'TM',
    
    /**
     * Turks & Caicos Islands.
     */
    TC = 'TC',
    
    /**
     * Tuvalu.
     */
    TV = 'TV',
    
    /**
     * Uganda.
     */
    UG = 'UG',
    
    /**
     * Ukraine.
     */
    UA = 'UA',
    
    /**
     * United Arab Emirates.
     */
    AE = 'AE',
    
    /**
     * United Kingdom.
     */
    GB = 'GB',
    
    /**
     * United States.
     */
    US = 'US',
    
    /**
     * U.S. Outlying Islands.
     */
    UM = 'UM',
    
    /**
     * Uruguay.
     */
    UY = 'UY',
    
    /**
     * Uzbekistan.
     */
    UZ = 'UZ',
    
    /**
     * Vanuatu.
     */
    VU = 'VU',
    
    /**
     * Venezuela.
     */
    VE = 'VE',
    
    /**
     * Vietnam.
     */
    VN = 'VN',
    
    /**
     * British Virgin Islands.
     */
    VG = 'VG',
    
    /**
     * Wallis & Futuna.
     */
    WF = 'WF',
    
    /**
     * Western Sahara.
     */
    EH = 'EH',
    
    /**
     * Yemen.
     */
    YE = 'YE',
    
    /**
     * Zambia.
     */
    ZM = 'ZM',
    
    /**
     * Zimbabwe.
     */
    ZW = 'ZW'
  }
  
  /**
   * A container for all the information required to checkout items and pay.
   */
  export interface Checkout extends Node {
    
    /**
     * The gift cards used on the checkout.
     */
    appliedGiftCards: Array<AppliedGiftCard>;
    
    /**
     * The available shipping rates for this Checkout.
     * Should only be used when checkout `requiresShipping` is `true` and
     * the shipping address is valid.
     * 
     */
    availableShippingRates?: AvailableShippingRates;
    
    /**
     * The date and time when the checkout was completed.
     */
    completedAt?: DateTime;
    
    /**
     * The date and time when the checkout was created.
     */
    createdAt: DateTime;
    
    /**
     * The currency code for the Checkout.
     */
    currencyCode: CurrencyCode;
    
    /**
     * A list of extra information that is added to the checkout.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * The customer associated with the checkout.
     * @deprecated This field will always return null. If you have an authentication token for the customer, you can use the `customer` field on the query root to retrieve it.
     */
    customer?: Customer;
    
    /**
     * Discounts that have been applied on the checkout.
     */
    discountApplications: DiscountApplicationConnection;
    
    /**
     * The email attached to this checkout.
     */
    email?: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * A list of line item objects, each one containing information about an item in the checkout.
     */
    lineItems: CheckoutLineItemConnection;
    
    /**
     * The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded.
     */
    lineItemsSubtotalPrice: MoneyV2;
    
    /**
     * The note associated with the checkout.
     */
    note?: string;
    
    /**
     * The resulting order from a paid checkout.
     */
    order?: Order;
    
    /**
     * The Order Status Page for this Checkout, null when checkout is not completed.
     */
    orderStatusUrl?: URL;
    
    /**
     * The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.
     * @deprecated Use `paymentDueV2` instead
     */
    paymentDue: Money;
    
    /**
     * The amount left to be paid. This is equal to the cost of the line items, duties, taxes and shipping minus discounts and gift cards.
     */
    paymentDueV2: MoneyV2;
    
    /**
     * Whether or not the Checkout is ready and can be completed. Checkouts may
     * have asynchronous operations that can take time to finish. If you want
     * to complete a checkout or ensure all the fields are populated and up to
     * date, polling is required until the value is true.
     * 
     */
    ready: boolean;
    
    /**
     * States whether or not the fulfillment requires shipping.
     */
    requiresShipping: boolean;
    
    /**
     * The shipping address to where the line items will be shipped.
     */
    shippingAddress?: MailingAddress;
    
    /**
     * The discounts that have been allocated onto the shipping line by discount applications.
     * 
     */
    shippingDiscountAllocations: Array<DiscountAllocation>;
    
    /**
     * Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object.
     */
    shippingLine?: ShippingRate;
    
    /**
     * Price of the checkout before shipping and taxes.
     * @deprecated Use `subtotalPriceV2` instead
     */
    subtotalPrice: Money;
    
    /**
     * Price of the checkout before duties, shipping and taxes.
     */
    subtotalPriceV2: MoneyV2;
    
    /**
     * Specifies if the Checkout is tax exempt.
     */
    taxExempt: boolean;
    
    /**
     * Specifies if taxes are included in the line item and shipping line prices.
     */
    taxesIncluded: boolean;
    
    /**
     * The sum of all the prices of all the items in the checkout, taxes and discounts included.
     * @deprecated Use `totalPriceV2` instead
     */
    totalPrice: Money;
    
    /**
     * The sum of all the prices of all the items in the checkout, duties, taxes and discounts included.
     */
    totalPriceV2: MoneyV2;
    
    /**
     * The sum of all the taxes applied to the line items and shipping lines in the checkout.
     * @deprecated Use `totalTaxV2` instead
     */
    totalTax: Money;
    
    /**
     * The sum of all the taxes applied to the line items and shipping lines in the checkout.
     */
    totalTaxV2: MoneyV2;
    
    /**
     * The date and time when the checkout was last updated.
     */
    updatedAt: DateTime;
    
    /**
     * The url pointing to the checkout accessible from the web.
     */
    webUrl: URL;
  }
  
  /**
   * Details about the gift card used on the checkout.
   */
  export interface AppliedGiftCard extends Node {
    
    /**
     * The amount that was taken from the gift card by applying it.
     * @deprecated Use `amountUsedV2` instead
     */
    amountUsed: Money;
    
    /**
     * The amount that was taken from the gift card by applying it.
     */
    amountUsedV2: MoneyV2;
    
    /**
     * The amount left on the gift card.
     * @deprecated Use `balanceV2` instead
     */
    balance: Money;
    
    /**
     * The amount left on the gift card.
     */
    balanceV2: MoneyV2;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The last characters of the gift card.
     */
    lastCharacters: string;
    
    /**
     * The amount that was applied to the checkout in its currency.
     */
    presentmentAmountUsed: MoneyV2;
  }
  
  /**
   * A collection of available shipping rates for a checkout.
   */
  export interface AvailableShippingRates {
    
    /**
     * Whether or not the shipping rates are ready.
     * The `shippingRates` field is `null` when this value is `false`.
     * This field should be polled until its value becomes `true`.
     * 
     */
    ready: boolean;
    
    /**
     * The fetched shipping rates. `null` until the `ready` field is `true`.
     */
    shippingRates?: Array<ShippingRate>;
  }
  
  /**
   * A shipping rate to be applied to a checkout.
   */
  export interface ShippingRate {
    
    /**
     * Human-readable unique identifier for this shipping rate.
     */
    handle: string;
    
    /**
     * Price of this shipping rate.
     * @deprecated Use `priceV2` instead
     */
    price: Money;
    
    /**
     * Price of this shipping rate.
     */
    priceV2: MoneyV2;
    
    /**
     * Title of this shipping rate.
     */
    title: string;
  }
  
  /**
   * Represents a generic custom attribute.
   */
  export interface Attribute {
    
    /**
     * Key or name of the attribute.
     */
    key: string;
    
    /**
     * Value of the attribute.
     */
    value?: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple DiscountApplications.
   * 
   */
  export interface DiscountApplicationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DiscountApplicationEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DiscountApplication and a cursor during pagination.
   * 
   */
  export interface DiscountApplicationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DiscountApplicationEdge.
     */
    node: DiscountApplication;
  }
  
  /**
   * Discount applications capture the intentions of a discount source at
   * the time of application.
   * 
   */
  export interface DiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * Which lines of targetType that the discount is allocated over.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * The type of line that the discount is applicable towards.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /** Use this to resolve interface type DiscountApplication */
  export type PossibleDiscountApplicationTypeNames =
  'AutomaticDiscountApplication' |
  'DiscountCodeApplication' |
  'ManualDiscountApplication' |
  'ScriptDiscountApplication';
  
  export interface DiscountApplicationNameMap {
    DiscountApplication: DiscountApplication;
    AutomaticDiscountApplication: AutomaticDiscountApplication;
    DiscountCodeApplication: DiscountCodeApplication;
    ManualDiscountApplication: ManualDiscountApplication;
    ScriptDiscountApplication: ScriptDiscountApplication;
  }
  
  /**
   * The method by which the discount's value is allocated onto its entitled lines.
   */
  export const enum DiscountApplicationAllocationMethod {
    
    /**
     * The value is spread across all entitled lines.
     */
    ACROSS = 'ACROSS',
    
    /**
     * The value is applied onto every entitled line.
     */
    EACH = 'EACH',
    
    /**
     * The value is specifically applied onto a particular line.
     * @deprecated Use ACROSS instead.
     */
    ONE = 'ONE'
  }
  
  /**
   * Which lines on the order that the discount is allocated over, of the type
   * defined by the Discount Application's target_type.
   * 
   */
  export const enum DiscountApplicationTargetSelection {
    
    /**
     * The discount is allocated onto all the lines.
     */
    ALL = 'ALL',
    
    /**
     * The discount is allocated onto only the lines it is entitled for.
     */
    ENTITLED = 'ENTITLED',
    
    /**
     * The discount is allocated onto explicitly chosen lines.
     */
    EXPLICIT = 'EXPLICIT'
  }
  
  /**
   * The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
   * 
   */
  export const enum DiscountApplicationTargetType {
    
    /**
     * The discount applies onto line items.
     */
    LINE_ITEM = 'LINE_ITEM',
    
    /**
     * The discount applies onto shipping lines.
     */
    SHIPPING_LINE = 'SHIPPING_LINE'
  }
  
  /**
   * The price value (fixed or percentage) for a discount application.
   */
  export type PricingValue = MoneyV2 | PricingPercentageValue;
  
  /** Use this to resolve union type PricingValue */
  export type PossiblePricingValueTypeNames =
  'MoneyV2' |
  'PricingPercentageValue';
  
  export interface PricingValueNameMap {
    PricingValue: PricingValue;
    MoneyV2: MoneyV2;
    PricingPercentageValue: PricingPercentageValue;
  }
  
  /**
   * The value of the percentage pricing object.
   */
  export interface PricingPercentageValue {
    
    /**
     * The percentage value of the object.
     */
    percentage: number;
  }
  
  /**
   * An auto-generated type for paginating through multiple CheckoutLineItems.
   * 
   */
  export interface CheckoutLineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CheckoutLineItemEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CheckoutLineItem and a cursor during pagination.
   * 
   */
  export interface CheckoutLineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CheckoutLineItemEdge.
     */
    node: CheckoutLineItem;
  }
  
  /**
   * A single line item in the checkout, grouped by variant and attributes.
   */
  export interface CheckoutLineItem extends Node {
    
    /**
     * Extra information in the form of an array of Key-Value pairs about the line item.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * The discounts that have been allocated onto the checkout line item by discount applications.
     */
    discountAllocations: Array<DiscountAllocation>;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The quantity of the line item.
     */
    quantity: number;
    
    /**
     * Title of the line item. Defaults to the product's title.
     */
    title: string;
    
    /**
     * Unit price of the line item.
     */
    unitPrice?: MoneyV2;
    
    /**
     * Product variant of the line item.
     */
    variant?: ProductVariant;
  }
  
  /**
   * An amount discounting the line that has been allocated by a discount.
   * 
   */
  export interface DiscountAllocation {
    
    /**
     * Amount of discount allocated.
     */
    allocatedAmount: MoneyV2;
    
    /**
     * The discount this allocated amount originated from.
     */
    discountApplication: DiscountApplication;
  }
  
  /**
   * An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information.
   */
  export interface Order extends Node {
    
    /**
     * The reason for the order's cancellation. Returns `null` if the order wasn't canceled.
     */
    cancelReason?: OrderCancelReason;
    
    /**
     * The date and time when the order was canceled. Returns null if the order wasn't canceled.
     */
    canceledAt?: DateTime;
    
    /**
     * The code of the currency used for the payment.
     */
    currencyCode: CurrencyCode;
    
    /**
     * The subtotal of line items and their discounts, excluding line items that have been removed. Does not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes are not included unless the order is a taxes-included order.
     */
    currentSubtotalPrice: MoneyV2;
    
    /**
     * The total amount of the order, including duties, taxes and discounts, minus amounts for line items that have been removed.
     */
    currentTotalPrice: MoneyV2;
    
    /**
     * The total of all taxes applied to the order, excluding taxes for returned line items.
     */
    currentTotalTax: MoneyV2;
    
    /**
     * The locale code in which this specific order happened.
     */
    customerLocale?: string;
    
    /**
     * The unique URL that the customer can use to access the order.
     */
    customerUrl?: URL;
    
    /**
     * Discounts that have been applied on the order.
     */
    discountApplications: DiscountApplicationConnection;
    
    /**
     * Whether the order has had any edits applied or not.
     */
    edited: boolean;
    
    /**
     * The customer's email address.
     */
    email?: string;
    
    /**
     * The financial status of the order.
     */
    financialStatus?: OrderFinancialStatus;
    
    /**
     * The fulfillment status for the order.
     */
    fulfillmentStatus: OrderFulfillmentStatus;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * List of the order’s line items.
     */
    lineItems: OrderLineItemConnection;
    
    /**
     * Unique identifier for the order that appears on the order.
     * For example, _#1000_ or _Store1001.
     * 
     */
    name: string;
    
    /**
     * A unique numeric identifier for the order for use by shop owner and customer.
     */
    orderNumber: number;
    
    /**
     * The total price of the order before any applied edits.
     */
    originalTotalPrice: MoneyV2;
    
    /**
     * The customer's phone number for receiving SMS notifications.
     */
    phone?: string;
    
    /**
     * The date and time when the order was imported.
     * This value can be set to dates in the past when importing from other systems.
     * If no value is provided, it will be auto-generated based on current date and time.
     * 
     */
    processedAt: DateTime;
    
    /**
     * The address to where the order will be shipped.
     */
    shippingAddress?: MailingAddress;
    
    /**
     * The discounts that have been allocated onto the shipping line by discount applications.
     * 
     */
    shippingDiscountAllocations: Array<DiscountAllocation>;
    
    /**
     * The unique URL for the order's status page.
     */
    statusUrl: URL;
    
    /**
     * Price of the order before shipping and taxes.
     * @deprecated Use `subtotalPriceV2` instead
     */
    subtotalPrice?: Money;
    
    /**
     * Price of the order before duties, shipping and taxes.
     */
    subtotalPriceV2?: MoneyV2;
    
    /**
     * List of the order’s successful fulfillments.
     */
    successfulFulfillments?: Array<Fulfillment>;
    
    /**
     * The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
     * @deprecated Use `totalPriceV2` instead
     */
    totalPrice: Money;
    
    /**
     * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive).
     */
    totalPriceV2: MoneyV2;
    
    /**
     * The total amount that has been refunded.
     * @deprecated Use `totalRefundedV2` instead
     */
    totalRefunded: Money;
    
    /**
     * The total amount that has been refunded.
     */
    totalRefundedV2: MoneyV2;
    
    /**
     * The total cost of shipping.
     * @deprecated Use `totalShippingPriceV2` instead
     */
    totalShippingPrice: Money;
    
    /**
     * The total cost of shipping.
     */
    totalShippingPriceV2: MoneyV2;
    
    /**
     * The total cost of taxes.
     * @deprecated Use `totalTaxV2` instead
     */
    totalTax?: Money;
    
    /**
     * The total cost of taxes.
     */
    totalTaxV2?: MoneyV2;
  }
  
  /**
   * Represents the reason for the order's cancellation.
   */
  export const enum OrderCancelReason {
    
    /**
     * The customer wanted to cancel the order.
     */
    CUSTOMER = 'CUSTOMER',
    
    /**
     * The order was fraudulent.
     */
    FRAUD = 'FRAUD',
    
    /**
     * There was insufficient inventory.
     */
    INVENTORY = 'INVENTORY',
    
    /**
     * Payment was declined.
     */
    DECLINED = 'DECLINED',
    
    /**
     * The order was canceled for an unlisted reason.
     */
    OTHER = 'OTHER'
  }
  
  /**
   * Represents the order's current financial status.
   */
  export const enum OrderFinancialStatus {
    
    /**
     * Displayed as **Pending**.
     */
    PENDING = 'PENDING',
    
    /**
     * Displayed as **Authorized**.
     */
    AUTHORIZED = 'AUTHORIZED',
    
    /**
     * Displayed as **Partially paid**.
     */
    PARTIALLY_PAID = 'PARTIALLY_PAID',
    
    /**
     * Displayed as **Partially refunded**.
     */
    PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',
    
    /**
     * Displayed as **Voided**.
     */
    VOIDED = 'VOIDED',
    
    /**
     * Displayed as **Paid**.
     */
    PAID = 'PAID',
    
    /**
     * Displayed as **Refunded**.
     */
    REFUNDED = 'REFUNDED'
  }
  
  /**
   * Represents the order's current fulfillment status.
   */
  export const enum OrderFulfillmentStatus {
    
    /**
     * Displayed as **Unfulfilled**.
     */
    UNFULFILLED = 'UNFULFILLED',
    
    /**
     * Displayed as **Partially fulfilled**.
     */
    PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',
    
    /**
     * Displayed as **Fulfilled**.
     */
    FULFILLED = 'FULFILLED',
    
    /**
     * Displayed as **Restocked**.
     */
    RESTOCKED = 'RESTOCKED',
    
    /**
     * Displayed as **Pending fulfillment**.
     */
    PENDING_FULFILLMENT = 'PENDING_FULFILLMENT',
    
    /**
     * Displayed as **Open**.
     */
    OPEN = 'OPEN',
    
    /**
     * Displayed as **In progress**.
     */
    IN_PROGRESS = 'IN_PROGRESS',
    
    /**
     * Displayed as **Scheduled**.
     */
    SCHEDULED = 'SCHEDULED'
  }
  
  /**
   * An auto-generated type for paginating through multiple OrderLineItems.
   * 
   */
  export interface OrderLineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<OrderLineItemEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one OrderLineItem and a cursor during pagination.
   * 
   */
  export interface OrderLineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of OrderLineItemEdge.
     */
    node: OrderLineItem;
  }
  
  /**
   * Represents a single line in an order. There is one line item for each distinct product variant.
   */
  export interface OrderLineItem {
    
    /**
     * The number of entries associated to the line item minus the items that have been removed.
     */
    currentQuantity: number;
    
    /**
     * List of custom attributes associated to the line item.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * The discounts that have been allocated onto the order line item by discount applications.
     */
    discountAllocations: Array<DiscountAllocation>;
    
    /**
     * The total price of the line item, including discounts, and displayed in the presentment currency.
     */
    discountedTotalPrice: MoneyV2;
    
    /**
     * The total price of the line item, not including any discounts. The total price is calculated using the original unit price multiplied by the quantity, and it is displayed in the presentment currency.
     */
    originalTotalPrice: MoneyV2;
    
    /**
     * The number of products variants associated to the line item.
     */
    quantity: number;
    
    /**
     * The title of the product combined with title of the variant.
     */
    title: string;
    
    /**
     * The product variant object associated to the line item.
     */
    variant?: ProductVariant;
  }
  
  /**
   * Represents a single fulfillment in an order.
   */
  export interface Fulfillment {
    
    /**
     * List of the fulfillment's line items.
     */
    fulfillmentLineItems: FulfillmentLineItemConnection;
    
    /**
     * The name of the tracking company.
     */
    trackingCompany?: string;
    
    /**
     * Tracking information associated with the fulfillment,
     * such as the tracking number and tracking URL.
     * 
     */
    trackingInfo: Array<FulfillmentTrackingInfo>;
  }
  
  /**
   * An auto-generated type for paginating through multiple FulfillmentLineItems.
   * 
   */
  export interface FulfillmentLineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FulfillmentLineItemEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
   * 
   */
  export interface FulfillmentLineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FulfillmentLineItemEdge.
     */
    node: FulfillmentLineItem;
  }
  
  /**
   * Represents a single line item in a fulfillment. There is at most one fulfillment line item for each order line item.
   */
  export interface FulfillmentLineItem {
    
    /**
     * The associated order's line item.
     */
    lineItem: OrderLineItem;
    
    /**
     * The amount fulfilled in this fulfillment.
     */
    quantity: number;
  }
  
  /**
   * Tracking information associated with the fulfillment.
   */
  export interface FulfillmentTrackingInfo {
    
    /**
     * The tracking number of the fulfillment.
     */
    number?: string;
    
    /**
     * The URL to track the fulfillment.
     */
    url?: URL;
  }
  
  /**
   * The set of valid sort keys for the Order query.
   */
  export const enum OrderSortKeys {
    
    /**
     * Sort by the `processed_at` value.
     */
    PROCESSED_AT = 'PROCESSED_AT',
    
    /**
     * Sort by the `total_price` value.
     */
    TOTAL_PRICE = 'TOTAL_PRICE',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
     * results by relevance to the search term(s). When no search query is specified, this sort key is not
     * deterministic and should not be used.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Orders.
   * 
   */
  export interface OrderConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<OrderEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Order and a cursor during pagination.
   * 
   */
  export interface OrderEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of OrderEdge.
     */
    node: Order;
  }
  
  /**
   * Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store.
   */
  export interface Page extends Node {
    
    /**
     * The description of the page, complete with HTML formatting.
     */
    body: HTML;
    
    /**
     * Summary of the page body.
     */
    bodySummary: string;
    
    /**
     * The timestamp of the page creation.
     */
    createdAt: DateTime;
    
    /**
     * A human-friendly unique string for the page automatically generated from its title.
     */
    handle: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The page's SEO information.
     */
    seo?: SEO;
    
    /**
     * The title of the page.
     */
    title: string;
    
    /**
     * The timestamp of the latest page update.
     */
    updatedAt: DateTime;
    
    /**
     * The url pointing to the page accessible from the web.
     */
    url: URL;
  }
  
  /**
   * The set of valid sort keys for the Page query.
   */
  export const enum PageSortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
     * results by relevance to the search term(s). When no search query is specified, this sort key is not
     * deterministic and should not be used.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Pages.
   * 
   */
  export interface PageConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<PageEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Page and a cursor during pagination.
   * 
   */
  export interface PageEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of PageEdge.
     */
    node: Page;
  }
  
  /**
   * An auto-generated type for paginating through multiple Strings.
   * 
   */
  export interface StringConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<StringEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one String and a cursor during pagination.
   * 
   */
  export interface StringEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of StringEdge.
     */
    node: string;
  }
  
  /**
   * The set of valid sort keys for the Product query.
   */
  export const enum ProductSortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `product_type` value.
     */
    PRODUCT_TYPE = 'PRODUCT_TYPE',
    
    /**
     * Sort by the `vendor` value.
     */
    VENDOR = 'VENDOR',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `best_selling` value.
     */
    BEST_SELLING = 'BEST_SELLING',
    
    /**
     * Sort by the `price` value.
     */
    PRICE = 'PRICE',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
     * results by relevance to the search term(s). When no search query is specified, this sort key is not
     * deterministic and should not be used.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * A version of the API.
   */
  export interface ApiVersion {
    
    /**
     * The human-readable name of the version.
     */
    displayName: string;
    
    /**
     * The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
     */
    handle: string;
    
    /**
     * Whether the version is supported by Shopify.
     */
    supported: boolean;
  }
  
  /**
   * Shop represents a collection of the general settings and information about the shop.
   */
  export interface Shop {
    
    /**
     * List of the shop' articles.
     * @deprecated Use `QueryRoot.articles` instead.
     */
    articles: ArticleConnection;
    
    /**
     * List of the shop' blogs.
     * @deprecated Use `QueryRoot.blogs` instead.
     */
    blogs: BlogConnection;
    
    /**
     * Find a collection by its handle.
     * @deprecated Use `QueryRoot.collectionByHandle` instead.
     */
    collectionByHandle?: Collection;
    
    /**
     * List of the shop’s collections.
     * @deprecated Use `QueryRoot.collections` instead.
     */
    collections: CollectionConnection;
    
    /**
     * The three-letter code for the currency that the shop accepts.
     * @deprecated Use `paymentSettings` instead
     */
    currencyCode: CurrencyCode;
    
    /**
     * A description of the shop.
     */
    description?: string;
    
    /**
     * A string representing the way currency is formatted when the currency isn’t specified.
     */
    moneyFormat: string;
    
    /**
     * The shop’s name.
     */
    name: string;
    
    /**
     * Settings related to payments.
     */
    paymentSettings: PaymentSettings;
    
    /**
     * The shop’s primary domain.
     */
    primaryDomain: Domain;
    
    /**
     * The shop’s privacy policy.
     */
    privacyPolicy?: ShopPolicy;
    
    /**
     * Find a product by its handle.
     * @deprecated Use `QueryRoot.productByHandle` instead.
     */
    productByHandle?: Product;
    
    /**
     * A list of tags that have been added to products.
     * Additional access scope required: unauthenticated_read_product_tags.
     * 
     * @deprecated Use `QueryRoot.productTags` instead.
     */
    productTags: StringConnection;
    
    /**
     * List of the shop’s product types.
     * @deprecated Use `QueryRoot.productTypes` instead.
     */
    productTypes: StringConnection;
    
    /**
     * List of the shop’s products.
     * @deprecated Use `QueryRoot.products` instead.
     */
    products: ProductConnection;
    
    /**
     * The shop’s refund policy.
     */
    refundPolicy?: ShopPolicy;
    
    /**
     * The shop’s shipping policy.
     */
    shippingPolicy?: ShopPolicy;
    
    /**
     * Countries that the shop ships to.
     */
    shipsToCountries: Array<CountryCode>;
    
    /**
     * The shop’s Shopify Payments account id.
     * @deprecated Use `paymentSettings` instead
     */
    shopifyPaymentsAccountId?: string;
    
    /**
     * The shop’s terms of service.
     */
    termsOfService?: ShopPolicy;
  }
  
  /**
   * Settings related to payments.
   */
  export interface PaymentSettings {
    
    /**
     * List of the card brands which the shop accepts.
     */
    acceptedCardBrands: Array<CardBrand>;
    
    /**
     * The url pointing to the endpoint to vault credit cards.
     */
    cardVaultUrl: URL;
    
    /**
     * The country where the shop is located.
     */
    countryCode: CountryCode;
    
    /**
     * The three-letter code for the shop's primary currency.
     */
    currencyCode: CurrencyCode;
    
    /**
     * A list of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify admin.
     */
    enabledPresentmentCurrencies: Array<CurrencyCode>;
    
    /**
     * The shop’s Shopify Payments account id.
     */
    shopifyPaymentsAccountId?: string;
    
    /**
     * List of the digital wallets which the shop supports.
     */
    supportedDigitalWallets: Array<DigitalWallet>;
  }
  
  /**
   * Card brand, such as Visa or Mastercard, which can be used for payments.
   */
  export const enum CardBrand {
    
    /**
     * Visa
     */
    VISA = 'VISA',
    
    /**
     * Mastercard
     */
    MASTERCARD = 'MASTERCARD',
    
    /**
     * Discover
     */
    DISCOVER = 'DISCOVER',
    
    /**
     * American Express
     */
    AMERICAN_EXPRESS = 'AMERICAN_EXPRESS',
    
    /**
     * Diners Club
     */
    DINERS_CLUB = 'DINERS_CLUB',
    
    /**
     * JCB
     */
    JCB = 'JCB'
  }
  
  /**
   * Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
   */
  export const enum DigitalWallet {
    
    /**
     * Apple Pay.
     */
    APPLE_PAY = 'APPLE_PAY',
    
    /**
     * Android Pay.
     */
    ANDROID_PAY = 'ANDROID_PAY',
    
    /**
     * Google Pay.
     */
    GOOGLE_PAY = 'GOOGLE_PAY',
    
    /**
     * Shopify Pay.
     */
    SHOPIFY_PAY = 'SHOPIFY_PAY'
  }
  
  /**
   * Represents a web address.
   */
  export interface Domain {
    
    /**
     * The host name of the domain (eg: `example.com`).
     */
    host: string;
    
    /**
     * Whether SSL is enabled or not.
     */
    sslEnabled: boolean;
    
    /**
     * The URL of the domain (eg: `https://example.com`).
     */
    url: URL;
  }
  
  /**
   * Policy that a merchant has configured for their store, such as their refund or privacy policy.
   */
  export interface ShopPolicy extends Node {
    
    /**
     * Policy text, maximum size of 64kb.
     */
    body: string;
    
    /**
     * Policy’s handle.
     */
    handle: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * Policy’s title.
     */
    title: string;
    
    /**
     * Public URL to the policy.
     */
    url: URL;
  }
  
  /**
   * The schema’s entry-point for mutations. This acts as the public, top-level API from which all mutation queries must start.
   */
  export interface Mutation {
    
    /**
     * Updates the attributes of a checkout.
     * @deprecated Use `checkoutAttributesUpdateV2` instead
     */
    checkoutAttributesUpdate?: CheckoutAttributesUpdatePayload;
    
    /**
     * Updates the attributes of a checkout.
     */
    checkoutAttributesUpdateV2?: CheckoutAttributesUpdateV2Payload;
    
    /**
     * Completes a checkout without providing payment information. You can use this mutation for free items or items whose purchase price is covered by a gift card.
     */
    checkoutCompleteFree?: CheckoutCompleteFreePayload;
    
    /**
     * Completes a checkout using a credit card token from Shopify's Vault.
     * @deprecated Use `checkoutCompleteWithCreditCardV2` instead
     */
    checkoutCompleteWithCreditCard?: CheckoutCompleteWithCreditCardPayload;
    
    /**
     * Completes a checkout using a credit card token from Shopify's card vault. Before you can complete checkouts using CheckoutCompleteWithCreditCardV2, you need to  [_request payment processing_](https://help.shopify.com/api/guides/sales-channel-sdk/getting-started#request-payment-processing).
     */
    checkoutCompleteWithCreditCardV2?: CheckoutCompleteWithCreditCardV2Payload;
    
    /**
     * Completes a checkout with a tokenized payment.
     * @deprecated Use `checkoutCompleteWithTokenizedPaymentV2` instead
     */
    checkoutCompleteWithTokenizedPayment?: CheckoutCompleteWithTokenizedPaymentPayload;
    
    /**
     * Completes a checkout with a tokenized payment.
     * @deprecated Use `checkoutCompleteWithTokenizedPaymentV3` instead
     */
    checkoutCompleteWithTokenizedPaymentV2?: CheckoutCompleteWithTokenizedPaymentV2Payload;
    
    /**
     * Completes a checkout with a tokenized payment.
     */
    checkoutCompleteWithTokenizedPaymentV3?: CheckoutCompleteWithTokenizedPaymentV3Payload;
    
    /**
     * Creates a new checkout.
     */
    checkoutCreate?: CheckoutCreatePayload;
    
    /**
     * Associates a customer to the checkout.
     * @deprecated Use `checkoutCustomerAssociateV2` instead
     */
    checkoutCustomerAssociate?: CheckoutCustomerAssociatePayload;
    
    /**
     * Associates a customer to the checkout.
     */
    checkoutCustomerAssociateV2?: CheckoutCustomerAssociateV2Payload;
    
    /**
     * Disassociates the current checkout customer from the checkout.
     * @deprecated Use `checkoutCustomerDisassociateV2` instead
     */
    checkoutCustomerDisassociate?: CheckoutCustomerDisassociatePayload;
    
    /**
     * Disassociates the current checkout customer from the checkout.
     */
    checkoutCustomerDisassociateV2?: CheckoutCustomerDisassociateV2Payload;
    
    /**
     * Applies a discount to an existing checkout using a discount code.
     * @deprecated Use `checkoutDiscountCodeApplyV2` instead
     */
    checkoutDiscountCodeApply?: CheckoutDiscountCodeApplyPayload;
    
    /**
     * Applies a discount to an existing checkout using a discount code.
     */
    checkoutDiscountCodeApplyV2?: CheckoutDiscountCodeApplyV2Payload;
    
    /**
     * Removes the applied discount from an existing checkout.
     */
    checkoutDiscountCodeRemove?: CheckoutDiscountCodeRemovePayload;
    
    /**
     * Updates the email on an existing checkout.
     * @deprecated Use `checkoutEmailUpdateV2` instead
     */
    checkoutEmailUpdate?: CheckoutEmailUpdatePayload;
    
    /**
     * Updates the email on an existing checkout.
     */
    checkoutEmailUpdateV2?: CheckoutEmailUpdateV2Payload;
    
    /**
     * Applies a gift card to an existing checkout using a gift card code. This will replace all currently applied gift cards.
     * @deprecated Use `checkoutGiftCardsAppend` instead
     */
    checkoutGiftCardApply?: CheckoutGiftCardApplyPayload;
    
    /**
     * Removes an applied gift card from the checkout.
     * @deprecated Use `checkoutGiftCardRemoveV2` instead
     */
    checkoutGiftCardRemove?: CheckoutGiftCardRemovePayload;
    
    /**
     * Removes an applied gift card from the checkout.
     */
    checkoutGiftCardRemoveV2?: CheckoutGiftCardRemoveV2Payload;
    
    /**
     * Appends gift cards to an existing checkout.
     */
    checkoutGiftCardsAppend?: CheckoutGiftCardsAppendPayload;
    
    /**
     * Adds a list of line items to a checkout.
     */
    checkoutLineItemsAdd?: CheckoutLineItemsAddPayload;
    
    /**
     * Removes line items from an existing checkout.
     */
    checkoutLineItemsRemove?: CheckoutLineItemsRemovePayload;
    
    /**
     * Sets a list of line items to a checkout.
     */
    checkoutLineItemsReplace?: CheckoutLineItemsReplacePayload;
    
    /**
     * Updates line items on a checkout.
     */
    checkoutLineItemsUpdate?: CheckoutLineItemsUpdatePayload;
    
    /**
     * Updates the shipping address of an existing checkout.
     * @deprecated Use `checkoutShippingAddressUpdateV2` instead
     */
    checkoutShippingAddressUpdate?: CheckoutShippingAddressUpdatePayload;
    
    /**
     * Updates the shipping address of an existing checkout.
     */
    checkoutShippingAddressUpdateV2?: CheckoutShippingAddressUpdateV2Payload;
    
    /**
     * Updates the shipping lines on an existing checkout.
     */
    checkoutShippingLineUpdate?: CheckoutShippingLineUpdatePayload;
    
    /**
     * Creates a customer access token.
     * The customer access token is required to modify the customer object in any way.
     * 
     */
    customerAccessTokenCreate?: CustomerAccessTokenCreatePayload;
    
    /**
     * Creates a customer access token using a multipass token instead of email and password.
     * A customer record is created if customer does not exist. If a customer record already
     * exists but the record is disabled, then it's enabled.
     * 
     */
    customerAccessTokenCreateWithMultipass?: CustomerAccessTokenCreateWithMultipassPayload;
    
    /**
     * Permanently destroys a customer access token.
     */
    customerAccessTokenDelete?: CustomerAccessTokenDeletePayload;
    
    /**
     * Renews a customer access token.
     * 
     * Access token renewal must happen *before* a token expires.
     * If a token has already expired, a new one should be created instead via `customerAccessTokenCreate`.
     * 
     */
    customerAccessTokenRenew?: CustomerAccessTokenRenewPayload;
    
    /**
     * Activates a customer.
     */
    customerActivate?: CustomerActivatePayload;
    
    /**
     * Activates a customer with the activation url received from `customerCreate`.
     */
    customerActivateByUrl?: CustomerActivateByUrlPayload;
    
    /**
     * Creates a new address for a customer.
     */
    customerAddressCreate?: CustomerAddressCreatePayload;
    
    /**
     * Permanently deletes the address of an existing customer.
     */
    customerAddressDelete?: CustomerAddressDeletePayload;
    
    /**
     * Updates the address of an existing customer.
     */
    customerAddressUpdate?: CustomerAddressUpdatePayload;
    
    /**
     * Creates a new customer.
     */
    customerCreate?: CustomerCreatePayload;
    
    /**
     * Updates the default address of an existing customer.
     */
    customerDefaultAddressUpdate?: CustomerDefaultAddressUpdatePayload;
    
    /**
     * Sends a reset password email to the customer, as the first step in the reset password process.
     */
    customerRecover?: CustomerRecoverPayload;
    
    /**
     * Resets a customer’s password with a token received from `CustomerRecover`.
     */
    customerReset?: CustomerResetPayload;
    
    /**
     * Resets a customer’s password with the reset password url received from `CustomerRecover`.
     */
    customerResetByUrl?: CustomerResetByUrlPayload;
    
    /**
     * Updates an existing customer.
     */
    customerUpdate?: CustomerUpdatePayload;
  }
  
  /**
   * Specifies the fields required to update a checkout's attributes.
   */
  export interface CheckoutAttributesUpdateInput {
    
    /**
     * The text of an optional note that a shop owner can attach to the checkout.
     */
    note?: string;
    
    /**
     * A list of extra information that is added to the checkout.
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * Allows setting partial addresses on a Checkout, skipping the full validation of attributes.
     * The required attributes are city, province, and country.
     * Full validation of the addresses is still done at complete time.
     * 
     */
    allowPartialAddresses?: boolean;
  }
  
  /**
   * Specifies the input fields required for an attribute.
   */
  export interface AttributeInput {
    
    /**
     * Key or name of the attribute.
     */
    key: string;
    
    /**
     * Value of the attribute.
     */
    value: string;
  }
  
  /**
   * Return type for `checkoutAttributesUpdate` mutation.
   */
  export interface CheckoutAttributesUpdatePayload {
    
    /**
     * The updated checkout object.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Represents an error that happens during execution of a checkout mutation.
   */
  export interface CheckoutUserError extends DisplayableError {
    
    /**
     * Error code to uniquely identify the error.
     */
    code?: CheckoutErrorCode;
    
    /**
     * Path to the input field which caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Represents an error in the input of a mutation.
   */
  export interface DisplayableError {
    
    /**
     * Path to the input field which caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /** Use this to resolve interface type DisplayableError */
  export type PossibleDisplayableErrorTypeNames =
  'CheckoutUserError' |
  'UserError' |
  'CustomerUserError';
  
  export interface DisplayableErrorNameMap {
    DisplayableError: DisplayableError;
    CheckoutUserError: CheckoutUserError;
    UserError: UserError;
    CustomerUserError: CustomerUserError;
  }
  
  /**
   * Possible error codes that could be returned by CheckoutUserError.
   */
  export const enum CheckoutErrorCode {
    
    /**
     * Input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * Input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * Input value is not present.
     */
    PRESENT = 'PRESENT',
    
    /**
     * Input value should be less than maximum allowed value.
     */
    LESS_THAN = 'LESS_THAN',
    
    /**
     * Input value should be greater than or equal to minimum allowed value.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * Input value should be less or equal to maximum allowed value.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
    
    /**
     * Checkout is already completed.
     */
    ALREADY_COMPLETED = 'ALREADY_COMPLETED',
    
    /**
     * Checkout is locked.
     */
    LOCKED = 'LOCKED',
    
    /**
     * Input value is not supported.
     */
    NOT_SUPPORTED = 'NOT_SUPPORTED',
    
    /**
     * Input email contains an invalid domain name.
     */
    BAD_DOMAIN = 'BAD_DOMAIN',
    
    /**
     * Input Zip is invalid for country provided.
     */
    INVALID_FOR_COUNTRY = 'INVALID_FOR_COUNTRY',
    
    /**
     * Input Zip is invalid for country and province provided.
     */
    INVALID_FOR_COUNTRY_AND_PROVINCE = 'INVALID_FOR_COUNTRY_AND_PROVINCE',
    
    /**
     * Invalid state in country.
     */
    INVALID_STATE_IN_COUNTRY = 'INVALID_STATE_IN_COUNTRY',
    
    /**
     * Invalid province in country.
     */
    INVALID_PROVINCE_IN_COUNTRY = 'INVALID_PROVINCE_IN_COUNTRY',
    
    /**
     * Invalid region in country.
     */
    INVALID_REGION_IN_COUNTRY = 'INVALID_REGION_IN_COUNTRY',
    
    /**
     * Shipping rate expired.
     */
    SHIPPING_RATE_EXPIRED = 'SHIPPING_RATE_EXPIRED',
    
    /**
     * Gift card cannot be applied to a checkout that contains a gift card.
     */
    GIFT_CARD_UNUSABLE = 'GIFT_CARD_UNUSABLE',
    
    /**
     * Gift card is disabled.
     */
    GIFT_CARD_DISABLED = 'GIFT_CARD_DISABLED',
    
    /**
     * Gift card code is invalid.
     */
    GIFT_CARD_CODE_INVALID = 'GIFT_CARD_CODE_INVALID',
    
    /**
     * Gift card has already been applied.
     */
    GIFT_CARD_ALREADY_APPLIED = 'GIFT_CARD_ALREADY_APPLIED',
    
    /**
     * Gift card currency does not match checkout currency.
     */
    GIFT_CARD_CURRENCY_MISMATCH = 'GIFT_CARD_CURRENCY_MISMATCH',
    
    /**
     * Gift card is expired.
     */
    GIFT_CARD_EXPIRED = 'GIFT_CARD_EXPIRED',
    
    /**
     * Gift card has no funds left.
     */
    GIFT_CARD_DEPLETED = 'GIFT_CARD_DEPLETED',
    
    /**
     * Gift card was not found.
     */
    GIFT_CARD_NOT_FOUND = 'GIFT_CARD_NOT_FOUND',
    
    /**
     * Cart does not meet discount requirements notice.
     */
    CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE = 'CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE',
    
    /**
     * Discount expired.
     */
    DISCOUNT_EXPIRED = 'DISCOUNT_EXPIRED',
    
    /**
     * Discount disabled.
     */
    DISCOUNT_DISABLED = 'DISCOUNT_DISABLED',
    
    /**
     * Discount limit reached.
     */
    DISCOUNT_LIMIT_REACHED = 'DISCOUNT_LIMIT_REACHED',
    
    /**
     * Discount not found.
     */
    DISCOUNT_NOT_FOUND = 'DISCOUNT_NOT_FOUND',
    
    /**
     * Customer already used once per customer discount notice.
     */
    CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE = 'CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE',
    
    /**
     * Checkout is already completed.
     */
    EMPTY = 'EMPTY',
    
    /**
     * Not enough in stock.
     */
    NOT_ENOUGH_IN_STOCK = 'NOT_ENOUGH_IN_STOCK',
    
    /**
     * Missing payment input.
     */
    MISSING_PAYMENT_INPUT = 'MISSING_PAYMENT_INPUT',
    
    /**
     * The amount of the payment does not match the value to be paid.
     */
    TOTAL_PRICE_MISMATCH = 'TOTAL_PRICE_MISMATCH',
    
    /**
     * Line item was not found in checkout.
     */
    LINE_ITEM_NOT_FOUND = 'LINE_ITEM_NOT_FOUND',
    
    /**
     * Unable to apply discount.
     */
    UNABLE_TO_APPLY = 'UNABLE_TO_APPLY',
    
    /**
     * Discount already applied.
     */
    DISCOUNT_ALREADY_APPLIED = 'DISCOUNT_ALREADY_APPLIED'
  }
  
  /**
   * Represents an error in the input of a mutation.
   */
  export interface UserError extends DisplayableError {
    
    /**
     * Path to the input field which caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Specifies the fields required to update a checkout's attributes.
   */
  export interface CheckoutAttributesUpdateV2Input {
    
    /**
     * The text of an optional note that a shop owner can attach to the checkout.
     */
    note?: string;
    
    /**
     * A list of extra information that is added to the checkout.
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * Allows setting partial addresses on a Checkout, skipping the full validation of attributes.
     * The required attributes are city, province, and country.
     * Full validation of the addresses is still done at complete time.
     * 
     */
    allowPartialAddresses?: boolean;
  }
  
  /**
   * Return type for `checkoutAttributesUpdateV2` mutation.
   */
  export interface CheckoutAttributesUpdateV2Payload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutCompleteFree` mutation.
   */
  export interface CheckoutCompleteFreePayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to complete a checkout with
   * a Shopify vaulted credit card payment.
   * 
   */
  export interface CreditCardPaymentInput {
    
    /**
     * The amount of the payment.
     */
    amount: Money;
    
    /**
     * A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one.
     */
    idempotencyKey: string;
    
    /**
     * The billing address for the payment.
     */
    billingAddress: MailingAddressInput;
    
    /**
     * The ID returned by Shopify's Card Vault.
     */
    vaultId: string;
    
    /**
     * Executes the payment in test mode if possible. Defaults to `false`.
     */
    test?: boolean;
  }
  
  /**
   * Specifies the fields accepted to create or update a mailing address.
   */
  export interface MailingAddressInput {
    
    /**
     * The first line of the address. Typically the street address or PO Box number.
     * 
     */
    address1?: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     * 
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     * 
     */
    city?: string;
    
    /**
     * The name of the customer's company or organization.
     * 
     */
    company?: string;
    
    /**
     * The name of the country.
     */
    country?: string;
    
    /**
     * The first name of the customer.
     */
    firstName?: string;
    
    /**
     * The last name of the customer.
     */
    lastName?: string;
    
    /**
     * A unique phone number for the customer.
     * 
     * Formatted using E.164 standard. For example, _+16135551111_.
     * 
     */
    phone?: string;
    
    /**
     * The region of the address, such as the province, state, or district.
     */
    province?: string;
    
    /**
     * The zip or postal code of the address.
     */
    zip?: string;
  }
  
  /**
   * Return type for `checkoutCompleteWithCreditCard` mutation.
   */
  export interface CheckoutCompleteWithCreditCardPayload {
    
    /**
     * The checkout on which the payment was applied.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * A representation of the attempted payment.
     */
    payment?: Payment;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * A payment applied to a checkout.
   */
  export interface Payment extends Node {
    
    /**
     * The amount of the payment.
     * @deprecated Use `amountV2` instead
     */
    amount: Money;
    
    /**
     * The amount of the payment.
     */
    amountV2: MoneyV2;
    
    /**
     * The billing address for the payment.
     */
    billingAddress?: MailingAddress;
    
    /**
     * The checkout to which the payment belongs.
     */
    checkout: Checkout;
    
    /**
     * The credit card used for the payment in the case of direct payments.
     */
    creditCard?: CreditCard;
    
    /**
     * A message describing a processing error during asynchronous processing.
     */
    errorMessage?: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * A client-side generated token to identify a payment and perform idempotent operations.
     */
    idempotencyKey?: string;
    
    /**
     * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
     */
    nextActionUrl?: URL;
    
    /**
     * Whether or not the payment is still processing asynchronously.
     */
    ready: boolean;
    
    /**
     * A flag to indicate if the payment is to be done in test mode for gateways that support it.
     */
    test: boolean;
    
    /**
     * The actual transaction recorded by Shopify after having processed the payment with the gateway.
     */
    transaction?: Transaction;
  }
  
  /**
   * Credit card information used for a payment.
   */
  export interface CreditCard {
    
    /**
     * The brand of the credit card.
     */
    brand?: string;
    
    /**
     * The expiry month of the credit card.
     */
    expiryMonth?: number;
    
    /**
     * The expiry year of the credit card.
     */
    expiryYear?: number;
    
    /**
     * The credit card's BIN number.
     */
    firstDigits?: string;
    
    /**
     * The first name of the card holder.
     */
    firstName?: string;
    
    /**
     * The last 4 digits of the credit card.
     */
    lastDigits?: string;
    
    /**
     * The last name of the card holder.
     */
    lastName?: string;
    
    /**
     * The masked credit card number with only the last 4 digits displayed.
     */
    maskedNumber?: string;
  }
  
  /**
   * An object representing exchange of money for a product or service.
   */
  export interface Transaction {
    
    /**
     * The amount of money that the transaction was for.
     * @deprecated Use `amountV2` instead
     */
    amount: Money;
    
    /**
     * The amount of money that the transaction was for.
     */
    amountV2: MoneyV2;
    
    /**
     * The kind of the transaction.
     */
    kind: TransactionKind;
    
    /**
     * The status of the transaction.
     * @deprecated Use `statusV2` instead
     */
    status: TransactionStatus;
    
    /**
     * The status of the transaction.
     */
    statusV2?: TransactionStatus;
    
    /**
     * Whether the transaction was done in test mode or not.
     */
    test: boolean;
  }
  
  export const enum TransactionKind {
    SALE = 'SALE',
    CAPTURE = 'CAPTURE',
    AUTHORIZATION = 'AUTHORIZATION',
    EMV_AUTHORIZATION = 'EMV_AUTHORIZATION',
    CHANGE = 'CHANGE'
  }
  
  export const enum TransactionStatus {
    PENDING = 'PENDING',
    SUCCESS = 'SUCCESS',
    FAILURE = 'FAILURE',
    ERROR = 'ERROR'
  }
  
  /**
   * Specifies the fields required to complete a checkout with
   * a Shopify vaulted credit card payment.
   * 
   */
  export interface CreditCardPaymentInputV2 {
    
    /**
     * The amount and currency of the payment.
     */
    paymentAmount: MoneyInput;
    
    /**
     * A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one.
     */
    idempotencyKey: string;
    
    /**
     * The billing address for the payment.
     */
    billingAddress: MailingAddressInput;
    
    /**
     * The ID returned by Shopify's Card Vault.
     */
    vaultId: string;
    
    /**
     * Executes the payment in test mode if possible. Defaults to `false`.
     */
    test?: boolean;
  }
  
  /**
   * Specifies the fields for a monetary value with currency.
   */
  export interface MoneyInput {
    
    /**
     * Decimal money amount.
     */
    amount: Decimal;
    
    /**
     * Currency of the money.
     */
    currencyCode: CurrencyCode;
  }
  
  /**
   * Return type for `checkoutCompleteWithCreditCardV2` mutation.
   */
  export interface CheckoutCompleteWithCreditCardV2Payload {
    
    /**
     * The checkout on which the payment was applied.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * A representation of the attempted payment.
     */
    payment?: Payment;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to complete a checkout with
   * a tokenized payment.
   * 
   */
  export interface TokenizedPaymentInput {
    
    /**
     * The amount of the payment.
     */
    amount: Money;
    
    /**
     * A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one.
     */
    idempotencyKey: string;
    
    /**
     * The billing address for the payment.
     */
    billingAddress: MailingAddressInput;
    
    /**
     * The type of payment token.
     */
    type: string;
    
    /**
     * A simple string or JSON containing the required payment data for the tokenized payment.
     */
    paymentData: string;
    
    /**
     * Executes the payment in test mode if possible. Defaults to `false`.
     */
    test?: boolean;
    
    /**
     * Public Hash Key used for AndroidPay payments only.
     */
    identifier?: string;
  }
  
  /**
   * Return type for `checkoutCompleteWithTokenizedPayment` mutation.
   */
  export interface CheckoutCompleteWithTokenizedPaymentPayload {
    
    /**
     * The checkout on which the payment was applied.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * A representation of the attempted payment.
     */
    payment?: Payment;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to complete a checkout with
   * a tokenized payment.
   * 
   */
  export interface TokenizedPaymentInputV2 {
    
    /**
     * The amount and currency of the payment.
     */
    paymentAmount: MoneyInput;
    
    /**
     * A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one.
     */
    idempotencyKey: string;
    
    /**
     * The billing address for the payment.
     */
    billingAddress: MailingAddressInput;
    
    /**
     * A simple string or JSON containing the required payment data for the tokenized payment.
     */
    paymentData: string;
    
    /**
     * Whether to execute the payment in test mode, if possible. Test mode is not supported in production stores. Defaults to `false`.
     */
    test?: boolean;
    
    /**
     * Public Hash Key used for AndroidPay payments only.
     */
    identifier?: string;
    
    /**
     * The type of payment token.
     */
    type: string;
  }
  
  /**
   * Return type for `checkoutCompleteWithTokenizedPaymentV2` mutation.
   */
  export interface CheckoutCompleteWithTokenizedPaymentV2Payload {
    
    /**
     * The checkout on which the payment was applied.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * A representation of the attempted payment.
     */
    payment?: Payment;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to complete a checkout with
   * a tokenized payment.
   * 
   */
  export interface TokenizedPaymentInputV3 {
    
    /**
     * The amount and currency of the payment.
     */
    paymentAmount: MoneyInput;
    
    /**
     * A unique client generated key used to avoid duplicate charges. When a duplicate payment is found, the original is returned instead of creating a new one.
     */
    idempotencyKey: string;
    
    /**
     * The billing address for the payment.
     */
    billingAddress: MailingAddressInput;
    
    /**
     * A simple string or JSON containing the required payment data for the tokenized payment.
     */
    paymentData: string;
    
    /**
     * Whether to execute the payment in test mode, if possible. Test mode is not supported in production stores. Defaults to `false`.
     */
    test?: boolean;
    
    /**
     * Public Hash Key used for AndroidPay payments only.
     */
    identifier?: string;
    
    /**
     * The type of payment token.
     */
    type: PaymentTokenType;
  }
  
  /**
   * The valid values for the types of payment token.
   */
  export const enum PaymentTokenType {
    
    /**
     * Apple Pay token type.
     */
    APPLE_PAY = 'APPLE_PAY',
    
    /**
     * Vault payment token type.
     */
    VAULT = 'VAULT',
    
    /**
     * Shopify Pay token type.
     */
    SHOPIFY_PAY = 'SHOPIFY_PAY',
    
    /**
     * Google Pay token type.
     */
    GOOGLE_PAY = 'GOOGLE_PAY'
  }
  
  /**
   * Return type for `checkoutCompleteWithTokenizedPaymentV3` mutation.
   */
  export interface CheckoutCompleteWithTokenizedPaymentV3Payload {
    
    /**
     * The checkout on which the payment was applied.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * A representation of the attempted payment.
     */
    payment?: Payment;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to create a checkout.
   */
  export interface CheckoutCreateInput {
    
    /**
     * The email with which the customer wants to checkout.
     */
    email?: string;
    
    /**
     * A list of line item objects, each one containing information about an item in the checkout.
     */
    lineItems?: Array<CheckoutLineItemInput>;
    
    /**
     * The shipping address to where the line items will be shipped.
     */
    shippingAddress?: MailingAddressInput;
    
    /**
     * The text of an optional note that a shop owner can attach to the checkout.
     */
    note?: string;
    
    /**
     * A list of extra information that is added to the checkout.
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * Allows setting partial addresses on a Checkout, skipping the full validation of attributes.
     * The required attributes are city, province, and country.
     * Full validation of addresses is still done at complete time.
     * 
     */
    allowPartialAddresses?: boolean;
    
    /**
     * The three-letter currency code of one of the shop's enabled presentment currencies.
     * Including this field creates a checkout in the specified currency. By default, new
     * checkouts are created in the shop's primary currency.
     * 
     */
    presentmentCurrencyCode?: CurrencyCode;
  }
  
  /**
   * Specifies the input fields to create a line item on a checkout.
   */
  export interface CheckoutLineItemInput {
    
    /**
     * Extra information in the form of an array of Key-Value pairs about the line item.
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * The quantity of the line item.
     */
    quantity: number;
    
    /**
     * The identifier of the product variant for the line item.
     */
    variantId: string;
  }
  
  /**
   * Return type for `checkoutCreate` mutation.
   */
  export interface CheckoutCreatePayload {
    
    /**
     * The new checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutCustomerAssociate` mutation.
   */
  export interface CheckoutCustomerAssociatePayload {
    
    /**
     * The updated checkout object.
     */
    checkout: Checkout;
    
    /**
     * The associated customer object.
     */
    customer?: Customer;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutCustomerAssociateV2` mutation.
   */
  export interface CheckoutCustomerAssociateV2Payload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * The associated customer object.
     */
    customer?: Customer;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutCustomerDisassociate` mutation.
   */
  export interface CheckoutCustomerDisassociatePayload {
    
    /**
     * The updated checkout object.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutCustomerDisassociateV2` mutation.
   */
  export interface CheckoutCustomerDisassociateV2Payload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutDiscountCodeApply` mutation.
   */
  export interface CheckoutDiscountCodeApplyPayload {
    
    /**
     * The updated checkout object.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutDiscountCodeApplyV2` mutation.
   */
  export interface CheckoutDiscountCodeApplyV2Payload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutDiscountCodeRemove` mutation.
   */
  export interface CheckoutDiscountCodeRemovePayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutEmailUpdate` mutation.
   */
  export interface CheckoutEmailUpdatePayload {
    
    /**
     * The checkout object with the updated email.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutEmailUpdateV2` mutation.
   */
  export interface CheckoutEmailUpdateV2Payload {
    
    /**
     * The checkout object with the updated email.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutGiftCardApply` mutation.
   */
  export interface CheckoutGiftCardApplyPayload {
    
    /**
     * The updated checkout object.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutGiftCardRemove` mutation.
   */
  export interface CheckoutGiftCardRemovePayload {
    
    /**
     * The updated checkout object.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutGiftCardRemoveV2` mutation.
   */
  export interface CheckoutGiftCardRemoveV2Payload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutGiftCardsAppend` mutation.
   */
  export interface CheckoutGiftCardsAppendPayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutLineItemsAdd` mutation.
   */
  export interface CheckoutLineItemsAddPayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutLineItemsRemove` mutation.
   */
  export interface CheckoutLineItemsRemovePayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutLineItemsReplace` mutation.
   */
  export interface CheckoutLineItemsReplacePayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    userErrors: Array<CheckoutUserError>;
  }
  
  /**
   * Specifies the input fields to update a line item on the checkout.
   */
  export interface CheckoutLineItemUpdateInput {
    
    /**
     * The identifier of the line item.
     */
    id?: string;
    
    /**
     * The variant identifier of the line item.
     */
    variantId?: string;
    
    /**
     * The quantity of the line item.
     */
    quantity?: number;
    
    /**
     * Extra information in the form of an array of Key-Value pairs about the line item.
     */
    customAttributes?: Array<AttributeInput>;
  }
  
  /**
   * Return type for `checkoutLineItemsUpdate` mutation.
   */
  export interface CheckoutLineItemsUpdatePayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutShippingAddressUpdate` mutation.
   */
  export interface CheckoutShippingAddressUpdatePayload {
    
    /**
     * The updated checkout object.
     */
    checkout: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutShippingAddressUpdateV2` mutation.
   */
  export interface CheckoutShippingAddressUpdateV2Payload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `checkoutShippingLineUpdate` mutation.
   */
  export interface CheckoutShippingLineUpdatePayload {
    
    /**
     * The updated checkout object.
     */
    checkout?: Checkout;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    checkoutUserErrors: Array<CheckoutUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `checkoutUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the input fields required to create a customer access token.
   */
  export interface CustomerAccessTokenCreateInput {
    
    /**
     * The email associated to the customer.
     */
    email: string;
    
    /**
     * The login password to be used by the customer.
     */
    password: string;
  }
  
  /**
   * Return type for `customerAccessTokenCreate` mutation.
   */
  export interface CustomerAccessTokenCreatePayload {
    
    /**
     * The newly created customer access token object.
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * A CustomerAccessToken represents the unique token required to make modifications to the customer object.
   */
  export interface CustomerAccessToken {
    
    /**
     * The customer’s access token.
     */
    accessToken: string;
    
    /**
     * The date and time when the customer access token expires.
     */
    expiresAt: DateTime;
  }
  
  /**
   * Represents an error that happens during execution of a customer mutation.
   */
  export interface CustomerUserError extends DisplayableError {
    
    /**
     * Error code to uniquely identify the error.
     */
    code?: CustomerErrorCode;
    
    /**
     * Path to the input field which caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that could be returned by CustomerUserError.
   */
  export const enum CustomerErrorCode {
    
    /**
     * Input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * Input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * Input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * Input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * Unidentified customer.
     */
    UNIDENTIFIED_CUSTOMER = 'UNIDENTIFIED_CUSTOMER',
    
    /**
     * Customer is disabled.
     */
    CUSTOMER_DISABLED = 'CUSTOMER_DISABLED',
    
    /**
     * Input password starts or ends with whitespace.
     */
    PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE = 'PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE',
    
    /**
     * Input contains HTML tags.
     */
    CONTAINS_HTML_TAGS = 'CONTAINS_HTML_TAGS',
    
    /**
     * Input contains URL.
     */
    CONTAINS_URL = 'CONTAINS_URL',
    
    /**
     * Invalid activation token.
     */
    TOKEN_INVALID = 'TOKEN_INVALID',
    
    /**
     * Customer already enabled.
     */
    ALREADY_ENABLED = 'ALREADY_ENABLED',
    
    /**
     * Address does not exist.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * Input email contains an invalid domain name.
     */
    BAD_DOMAIN = 'BAD_DOMAIN',
    
    /**
     * Multipass token is not valid.
     */
    INVALID_MULTIPASS_REQUEST = 'INVALID_MULTIPASS_REQUEST'
  }
  
  /**
   * Return type for `customerAccessTokenCreateWithMultipass` mutation.
   */
  export interface CustomerAccessTokenCreateWithMultipassPayload {
    
    /**
     * An access token object associated with the customer.
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
  }
  
  /**
   * Return type for `customerAccessTokenDelete` mutation.
   */
  export interface CustomerAccessTokenDeletePayload {
    
    /**
     * The destroyed access token.
     */
    deletedAccessToken?: string;
    
    /**
     * ID of the destroyed customer access token.
     */
    deletedCustomerAccessTokenId?: string;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerAccessTokenRenew` mutation.
   */
  export interface CustomerAccessTokenRenewPayload {
    
    /**
     * The renewed customer access token object.
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the input fields required to activate a customer.
   */
  export interface CustomerActivateInput {
    
    /**
     * The activation token required to activate the customer.
     */
    activationToken: string;
    
    /**
     * New password that will be set during activation.
     */
    password: string;
  }
  
  /**
   * Return type for `customerActivate` mutation.
   */
  export interface CustomerActivatePayload {
    
    /**
     * The customer object.
     */
    customer?: Customer;
    
    /**
     * A newly created customer access token object for the customer.
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerActivateByUrl` mutation.
   */
  export interface CustomerActivateByUrlPayload {
    
    /**
     * The customer that was activated.
     */
    customer?: Customer;
    
    /**
     * A new customer access token for the customer.
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
  }
  
  /**
   * Return type for `customerAddressCreate` mutation.
   */
  export interface CustomerAddressCreatePayload {
    
    /**
     * The new customer address object.
     */
    customerAddress?: MailingAddress;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerAddressDelete` mutation.
   */
  export interface CustomerAddressDeletePayload {
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * ID of the deleted customer address.
     */
    deletedCustomerAddressId?: string;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerAddressUpdate` mutation.
   */
  export interface CustomerAddressUpdatePayload {
    
    /**
     * The customer’s updated mailing address.
     */
    customerAddress?: MailingAddress;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to create a new customer.
   */
  export interface CustomerCreateInput {
    
    /**
     * The customer’s first name.
     */
    firstName?: string;
    
    /**
     * The customer’s last name.
     */
    lastName?: string;
    
    /**
     * The customer’s email.
     */
    email: string;
    
    /**
     * A unique phone number for the customer.
     * 
     * Formatted using E.164 standard. For example, _+16135551111_.
     * 
     */
    phone?: string;
    
    /**
     * The login password used by the customer.
     */
    password: string;
    
    /**
     * Indicates whether the customer has consented to be sent marketing material via email.
     */
    acceptsMarketing?: boolean;
  }
  
  /**
   * Return type for `customerCreate` mutation.
   */
  export interface CustomerCreatePayload {
    
    /**
     * The created customer object.
     */
    customer?: Customer;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerDefaultAddressUpdate` mutation.
   */
  export interface CustomerDefaultAddressUpdatePayload {
    
    /**
     * The updated customer object.
     */
    customer?: Customer;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerRecover` mutation.
   */
  export interface CustomerRecoverPayload {
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to reset a customer’s password.
   */
  export interface CustomerResetInput {
    
    /**
     * The reset token required to reset the customer’s password.
     */
    resetToken: string;
    
    /**
     * New password that will be set as part of the reset password process.
     */
    password: string;
  }
  
  /**
   * Return type for `customerReset` mutation.
   */
  export interface CustomerResetPayload {
    
    /**
     * The customer object which was reset.
     */
    customer?: Customer;
    
    /**
     * A newly created customer access token object for the customer.
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerResetByUrl` mutation.
   */
  export interface CustomerResetByUrlPayload {
    
    /**
     * The customer object which was reset.
     */
    customer?: Customer;
    
    /**
     * A newly created customer access token object for the customer.
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Specifies the fields required to update the Customer information.
   */
  export interface CustomerUpdateInput {
    
    /**
     * The customer’s first name.
     */
    firstName?: string;
    
    /**
     * The customer’s last name.
     */
    lastName?: string;
    
    /**
     * The customer’s email.
     */
    email?: string;
    
    /**
     * A unique phone number for the customer.
     * 
     * Formatted using E.164 standard. For example, _+16135551111_. To remove the phone number, specify `null`.
     * 
     */
    phone?: string;
    
    /**
     * The login password used by the customer.
     */
    password?: string;
    
    /**
     * Indicates whether the customer has consented to be sent marketing material via email.
     */
    acceptsMarketing?: boolean;
  }
  
  /**
   * Return type for `customerUpdate` mutation.
   */
  export interface CustomerUpdatePayload {
    
    /**
     * The updated customer object.
     */
    customer?: Customer;
    
    /**
     * The newly created customer access token. If the customer's password is updated, all previous access tokens
     * (including the one used to perform this mutation) become invalid, and a new token is generated.
     * 
     */
    customerAccessToken?: CustomerAccessToken;
    
    /**
     * List of errors that occurred executing the mutation.
     */
    customerUserErrors: Array<CustomerUserError>;
    
    /**
     * List of errors that occurred executing the mutation.
     * @deprecated Use `customerUserErrors` instead
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Automatic discount applications capture the intentions of a discount that was automatically applied.
   * 
   */
  export interface AutomaticDiscountApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * Which lines of targetType that the discount is allocated over.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * The type of line that the discount is applicable towards.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The title of the application.
     */
    title: string;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * Discount code applications capture the intentions of a discount code at
   * the time that it is applied.
   * 
   */
  export interface DiscountCodeApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * Specifies whether the discount code was applied successfully.
     */
    applicable: boolean;
    
    /**
     * The string identifying the discount code that was used at the time of application.
     */
    code: string;
    
    /**
     * Which lines of targetType that the discount is allocated over.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * The type of line that the discount is applicable towards.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * Represents a video hosted outside of Shopify.
   */
  export interface ExternalVideo extends Node, Media {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * The URL.
     */
    embeddedUrl: URL;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * The preview image for the media.
     */
    previewImage?: Image;
  }
  
  /**
   * Manual discount applications capture the intentions of a discount that was manually created.
   * 
   */
  export interface ManualDiscountApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The description of the application.
     */
    description?: string;
    
    /**
     * Which lines of targetType that the discount is allocated over.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * The type of line that the discount is applicable towards.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The title of the application.
     */
    title: string;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * Represents a Shopify hosted image.
   */
  export interface MediaImage extends Node, Media {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The image for the media.
     */
    image?: Image;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * The preview image for the media.
     */
    previewImage?: Image;
  }
  
  /**
   * Represents a Shopify hosted 3D model.
   */
  export interface Model3d extends Node, Media {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * The preview image for the media.
     */
    previewImage?: Image;
    
    /**
     * The sources for a 3d model.
     */
    sources: Array<Model3dSource>;
  }
  
  /**
   * Represents a source for a Shopify hosted 3d model.
   */
  export interface Model3dSource {
    
    /**
     * The filesize of the 3d model.
     */
    filesize: number;
    
    /**
     * The format of the 3d model.
     */
    format: string;
    
    /**
     * The MIME type of the 3d model.
     */
    mimeType: string;
    
    /**
     * The URL of the 3d model.
     */
    url: string;
  }
  
  /**
   * Script discount applications capture the intentions of a discount that
   * was created by a Shopify Script.
   * 
   */
  export interface ScriptDiscountApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The description of the application as defined by the Script.
     * @deprecated Use `title` instead
     */
    description: string;
    
    /**
     * Which lines of targetType that the discount is allocated over.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * The type of line that the discount is applicable towards.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The title of the application as defined by the Script.
     */
    title: string;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * Represents a Shopify hosted video.
   */
  export interface Video extends Node, Media {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * Globally unique identifier.
     */
    id: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * The preview image for the media.
     */
    previewImage?: Image;
    
    /**
     * The sources for a video.
     */
    sources: Array<VideoSource>;
  }
  
  /**
   * Represents a source for a Shopify hosted video.
   */
  export interface VideoSource {
    
    /**
     * The format of the video source.
     */
    format: string;
    
    /**
     * The height of the video.
     */
    height: number;
    
    /**
     * The video MIME type.
     */
    mimeType: string;
    
    /**
     * The URL of the video.
     */
    url: string;
    
    /**
     * The width of the video.
     */
    width: number;
  }
  
  /*********************************
   *                               *
   *         TYPE RESOLVERS        *
   *                               *
   *********************************/
  /**
   * This interface define the shape of your resolver
   * Note that this type is designed to be compatible with graphql-tools resolvers
   * However, you can still use other generated interfaces to make your resolver type-safed
   */
  export interface Resolver {
    QueryRoot?: QueryRootTypeResolver;
    ArticleConnection?: ArticleConnectionTypeResolver;
    ArticleEdge?: ArticleEdgeTypeResolver;
    Article?: ArticleTypeResolver;
    Node?: {
      __resolveType: NodeTypeResolver
    };
    
    ArticleAuthor?: ArticleAuthorTypeResolver;
    Blog?: BlogTypeResolver;
    SEO?: SEOTypeResolver;
    URL?: GraphQLScalarType;
    CommentConnection?: CommentConnectionTypeResolver;
    CommentEdge?: CommentEdgeTypeResolver;
    Comment?: CommentTypeResolver;
    CommentAuthor?: CommentAuthorTypeResolver;
    HTML?: GraphQLScalarType;
    PageInfo?: PageInfoTypeResolver;
    Image?: ImageTypeResolver;
    DateTime?: GraphQLScalarType;
    BlogConnection?: BlogConnectionTypeResolver;
    BlogEdge?: BlogEdgeTypeResolver;
    Collection?: CollectionTypeResolver;
    ProductConnection?: ProductConnectionTypeResolver;
    ProductEdge?: ProductEdgeTypeResolver;
    Product?: ProductTypeResolver;
    HasMetafields?: {
      __resolveType: HasMetafieldsTypeResolver
    };
    
    Metafield?: MetafieldTypeResolver;
    MetafieldParentResource?: {
      __resolveType: MetafieldParentResourceTypeResolver
    };
    
    ProductVariant?: ProductVariantTypeResolver;
    Money?: GraphQLScalarType;
    MoneyV2?: MoneyV2TypeResolver;
    Decimal?: GraphQLScalarType;
    MetafieldConnection?: MetafieldConnectionTypeResolver;
    MetafieldEdge?: MetafieldEdgeTypeResolver;
    ProductVariantPricePairConnection?: ProductVariantPricePairConnectionTypeResolver;
    ProductVariantPricePairEdge?: ProductVariantPricePairEdgeTypeResolver;
    ProductVariantPricePair?: ProductVariantPricePairTypeResolver;
    MoneyV2Connection?: MoneyV2ConnectionTypeResolver;
    MoneyV2Edge?: MoneyV2EdgeTypeResolver;
    SelectedOption?: SelectedOptionTypeResolver;
    UnitPriceMeasurement?: UnitPriceMeasurementTypeResolver;
    CollectionConnection?: CollectionConnectionTypeResolver;
    CollectionEdge?: CollectionEdgeTypeResolver;
    ProductPriceRange?: ProductPriceRangeTypeResolver;
    ImageConnection?: ImageConnectionTypeResolver;
    ImageEdge?: ImageEdgeTypeResolver;
    MediaConnection?: MediaConnectionTypeResolver;
    MediaEdge?: MediaEdgeTypeResolver;
    Media?: {
      __resolveType: MediaTypeResolver
    };
    
    ProductOption?: ProductOptionTypeResolver;
    ProductPriceRangeConnection?: ProductPriceRangeConnectionTypeResolver;
    ProductPriceRangeEdge?: ProductPriceRangeEdgeTypeResolver;
    ProductVariantConnection?: ProductVariantConnectionTypeResolver;
    ProductVariantEdge?: ProductVariantEdgeTypeResolver;
    Customer?: CustomerTypeResolver;
    MailingAddressConnection?: MailingAddressConnectionTypeResolver;
    MailingAddressEdge?: MailingAddressEdgeTypeResolver;
    MailingAddress?: MailingAddressTypeResolver;
    Checkout?: CheckoutTypeResolver;
    AppliedGiftCard?: AppliedGiftCardTypeResolver;
    AvailableShippingRates?: AvailableShippingRatesTypeResolver;
    ShippingRate?: ShippingRateTypeResolver;
    Attribute?: AttributeTypeResolver;
    DiscountApplicationConnection?: DiscountApplicationConnectionTypeResolver;
    DiscountApplicationEdge?: DiscountApplicationEdgeTypeResolver;
    DiscountApplication?: {
      __resolveType: DiscountApplicationTypeResolver
    };
    
    PricingValue?: {
      __resolveType: PricingValueTypeResolver
    };
    
    PricingPercentageValue?: PricingPercentageValueTypeResolver;
    CheckoutLineItemConnection?: CheckoutLineItemConnectionTypeResolver;
    CheckoutLineItemEdge?: CheckoutLineItemEdgeTypeResolver;
    CheckoutLineItem?: CheckoutLineItemTypeResolver;
    DiscountAllocation?: DiscountAllocationTypeResolver;
    Order?: OrderTypeResolver;
    OrderLineItemConnection?: OrderLineItemConnectionTypeResolver;
    OrderLineItemEdge?: OrderLineItemEdgeTypeResolver;
    OrderLineItem?: OrderLineItemTypeResolver;
    Fulfillment?: FulfillmentTypeResolver;
    FulfillmentLineItemConnection?: FulfillmentLineItemConnectionTypeResolver;
    FulfillmentLineItemEdge?: FulfillmentLineItemEdgeTypeResolver;
    FulfillmentLineItem?: FulfillmentLineItemTypeResolver;
    FulfillmentTrackingInfo?: FulfillmentTrackingInfoTypeResolver;
    OrderConnection?: OrderConnectionTypeResolver;
    OrderEdge?: OrderEdgeTypeResolver;
    Page?: PageTypeResolver;
    PageConnection?: PageConnectionTypeResolver;
    PageEdge?: PageEdgeTypeResolver;
    StringConnection?: StringConnectionTypeResolver;
    StringEdge?: StringEdgeTypeResolver;
    ApiVersion?: ApiVersionTypeResolver;
    Shop?: ShopTypeResolver;
    PaymentSettings?: PaymentSettingsTypeResolver;
    Domain?: DomainTypeResolver;
    ShopPolicy?: ShopPolicyTypeResolver;
    Mutation?: MutationTypeResolver;
    CheckoutAttributesUpdatePayload?: CheckoutAttributesUpdatePayloadTypeResolver;
    CheckoutUserError?: CheckoutUserErrorTypeResolver;
    DisplayableError?: {
      __resolveType: DisplayableErrorTypeResolver
    };
    
    UserError?: UserErrorTypeResolver;
    CheckoutAttributesUpdateV2Payload?: CheckoutAttributesUpdateV2PayloadTypeResolver;
    CheckoutCompleteFreePayload?: CheckoutCompleteFreePayloadTypeResolver;
    CheckoutCompleteWithCreditCardPayload?: CheckoutCompleteWithCreditCardPayloadTypeResolver;
    Payment?: PaymentTypeResolver;
    CreditCard?: CreditCardTypeResolver;
    Transaction?: TransactionTypeResolver;
    CheckoutCompleteWithCreditCardV2Payload?: CheckoutCompleteWithCreditCardV2PayloadTypeResolver;
    CheckoutCompleteWithTokenizedPaymentPayload?: CheckoutCompleteWithTokenizedPaymentPayloadTypeResolver;
    CheckoutCompleteWithTokenizedPaymentV2Payload?: CheckoutCompleteWithTokenizedPaymentV2PayloadTypeResolver;
    CheckoutCompleteWithTokenizedPaymentV3Payload?: CheckoutCompleteWithTokenizedPaymentV3PayloadTypeResolver;
    CheckoutCreatePayload?: CheckoutCreatePayloadTypeResolver;
    CheckoutCustomerAssociatePayload?: CheckoutCustomerAssociatePayloadTypeResolver;
    CheckoutCustomerAssociateV2Payload?: CheckoutCustomerAssociateV2PayloadTypeResolver;
    CheckoutCustomerDisassociatePayload?: CheckoutCustomerDisassociatePayloadTypeResolver;
    CheckoutCustomerDisassociateV2Payload?: CheckoutCustomerDisassociateV2PayloadTypeResolver;
    CheckoutDiscountCodeApplyPayload?: CheckoutDiscountCodeApplyPayloadTypeResolver;
    CheckoutDiscountCodeApplyV2Payload?: CheckoutDiscountCodeApplyV2PayloadTypeResolver;
    CheckoutDiscountCodeRemovePayload?: CheckoutDiscountCodeRemovePayloadTypeResolver;
    CheckoutEmailUpdatePayload?: CheckoutEmailUpdatePayloadTypeResolver;
    CheckoutEmailUpdateV2Payload?: CheckoutEmailUpdateV2PayloadTypeResolver;
    CheckoutGiftCardApplyPayload?: CheckoutGiftCardApplyPayloadTypeResolver;
    CheckoutGiftCardRemovePayload?: CheckoutGiftCardRemovePayloadTypeResolver;
    CheckoutGiftCardRemoveV2Payload?: CheckoutGiftCardRemoveV2PayloadTypeResolver;
    CheckoutGiftCardsAppendPayload?: CheckoutGiftCardsAppendPayloadTypeResolver;
    CheckoutLineItemsAddPayload?: CheckoutLineItemsAddPayloadTypeResolver;
    CheckoutLineItemsRemovePayload?: CheckoutLineItemsRemovePayloadTypeResolver;
    CheckoutLineItemsReplacePayload?: CheckoutLineItemsReplacePayloadTypeResolver;
    CheckoutLineItemsUpdatePayload?: CheckoutLineItemsUpdatePayloadTypeResolver;
    CheckoutShippingAddressUpdatePayload?: CheckoutShippingAddressUpdatePayloadTypeResolver;
    CheckoutShippingAddressUpdateV2Payload?: CheckoutShippingAddressUpdateV2PayloadTypeResolver;
    CheckoutShippingLineUpdatePayload?: CheckoutShippingLineUpdatePayloadTypeResolver;
    CustomerAccessTokenCreatePayload?: CustomerAccessTokenCreatePayloadTypeResolver;
    CustomerAccessToken?: CustomerAccessTokenTypeResolver;
    CustomerUserError?: CustomerUserErrorTypeResolver;
    CustomerAccessTokenCreateWithMultipassPayload?: CustomerAccessTokenCreateWithMultipassPayloadTypeResolver;
    CustomerAccessTokenDeletePayload?: CustomerAccessTokenDeletePayloadTypeResolver;
    CustomerAccessTokenRenewPayload?: CustomerAccessTokenRenewPayloadTypeResolver;
    CustomerActivatePayload?: CustomerActivatePayloadTypeResolver;
    CustomerActivateByUrlPayload?: CustomerActivateByUrlPayloadTypeResolver;
    CustomerAddressCreatePayload?: CustomerAddressCreatePayloadTypeResolver;
    CustomerAddressDeletePayload?: CustomerAddressDeletePayloadTypeResolver;
    CustomerAddressUpdatePayload?: CustomerAddressUpdatePayloadTypeResolver;
    CustomerCreatePayload?: CustomerCreatePayloadTypeResolver;
    CustomerDefaultAddressUpdatePayload?: CustomerDefaultAddressUpdatePayloadTypeResolver;
    CustomerRecoverPayload?: CustomerRecoverPayloadTypeResolver;
    CustomerResetPayload?: CustomerResetPayloadTypeResolver;
    CustomerResetByUrlPayload?: CustomerResetByUrlPayloadTypeResolver;
    CustomerUpdatePayload?: CustomerUpdatePayloadTypeResolver;
    AutomaticDiscountApplication?: AutomaticDiscountApplicationTypeResolver;
    DiscountCodeApplication?: DiscountCodeApplicationTypeResolver;
    ExternalVideo?: ExternalVideoTypeResolver;
    ManualDiscountApplication?: ManualDiscountApplicationTypeResolver;
    MediaImage?: MediaImageTypeResolver;
    Model3d?: Model3dTypeResolver;
    Model3dSource?: Model3dSourceTypeResolver;
    ScriptDiscountApplication?: ScriptDiscountApplicationTypeResolver;
    Video?: VideoTypeResolver;
    VideoSource?: VideoSourceTypeResolver;
  }
  export interface QueryRootTypeResolver<TParent = any> {
    articles?: QueryRootToArticlesResolver<TParent>;
    blogByHandle?: QueryRootToBlogByHandleResolver<TParent>;
    blogs?: QueryRootToBlogsResolver<TParent>;
    collectionByHandle?: QueryRootToCollectionByHandleResolver<TParent>;
    collections?: QueryRootToCollectionsResolver<TParent>;
    customer?: QueryRootToCustomerResolver<TParent>;
    node?: QueryRootToNodeResolver<TParent>;
    nodes?: QueryRootToNodesResolver<TParent>;
    pageByHandle?: QueryRootToPageByHandleResolver<TParent>;
    pages?: QueryRootToPagesResolver<TParent>;
    productByHandle?: QueryRootToProductByHandleResolver<TParent>;
    productRecommendations?: QueryRootToProductRecommendationsResolver<TParent>;
    productTags?: QueryRootToProductTagsResolver<TParent>;
    productTypes?: QueryRootToProductTypesResolver<TParent>;
    products?: QueryRootToProductsResolver<TParent>;
    publicApiVersions?: QueryRootToPublicApiVersionsResolver<TParent>;
    shop?: QueryRootToShopResolver<TParent>;
  }
  
  export interface QueryRootToArticlesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ArticleSortKeys;
    query?: string;
  }
  export interface QueryRootToArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToBlogByHandleArgs {
    handle: string;
  }
  export interface QueryRootToBlogByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToBlogByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToBlogsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: BlogSortKeys;
    query?: string;
  }
  export interface QueryRootToBlogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToBlogsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCollectionByHandleArgs {
    handle: string;
  }
  export interface QueryRootToCollectionByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCollectionByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CollectionSortKeys;
    query?: string;
  }
  export interface QueryRootToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerArgs {
    customerAccessToken: string;
  }
  export interface QueryRootToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToNodeArgs {
    id: string;
  }
  export interface QueryRootToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToNodesArgs {
    ids: Array<string>;
  }
  export interface QueryRootToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPageByHandleArgs {
    handle: string;
  }
  export interface QueryRootToPageByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPageByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPagesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: PageSortKeys;
    query?: string;
  }
  export interface QueryRootToPagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductByHandleArgs {
    handle: string;
  }
  export interface QueryRootToProductByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductRecommendationsArgs {
    productId: string;
  }
  export interface QueryRootToProductRecommendationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductRecommendationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductTagsArgs {
    first: number;
  }
  export interface QueryRootToProductTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductTypesArgs {
    first: number;
  }
  export interface QueryRootToProductTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductSortKeys;
    query?: string;
  }
  export interface QueryRootToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPublicApiVersionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleConnectionTypeResolver<TParent = any> {
    edges?: ArticleConnectionToEdgesResolver<TParent>;
    pageInfo?: ArticleConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ArticleConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleEdgeTypeResolver<TParent = any> {
    cursor?: ArticleEdgeToCursorResolver<TParent>;
    node?: ArticleEdgeToNodeResolver<TParent>;
  }
  
  export interface ArticleEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleTypeResolver<TParent = any> {
    author?: ArticleToAuthorResolver<TParent>;
    authorV2?: ArticleToAuthorV2Resolver<TParent>;
    blog?: ArticleToBlogResolver<TParent>;
    comments?: ArticleToCommentsResolver<TParent>;
    content?: ArticleToContentResolver<TParent>;
    contentHtml?: ArticleToContentHtmlResolver<TParent>;
    excerpt?: ArticleToExcerptResolver<TParent>;
    excerptHtml?: ArticleToExcerptHtmlResolver<TParent>;
    handle?: ArticleToHandleResolver<TParent>;
    id?: ArticleToIdResolver<TParent>;
    image?: ArticleToImageResolver<TParent>;
    publishedAt?: ArticleToPublishedAtResolver<TParent>;
    seo?: ArticleToSeoResolver<TParent>;
    tags?: ArticleToTagsResolver<TParent>;
    title?: ArticleToTitleResolver<TParent>;
    url?: ArticleToUrlResolver<TParent>;
  }
  
  export interface ArticleToAuthorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToAuthorV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToBlogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToCommentsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ArticleToCommentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ArticleToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToContentArgs {
    truncateAt?: number;
  }
  export interface ArticleToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ArticleToContentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToContentHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToExcerptArgs {
    truncateAt?: number;
  }
  export interface ArticleToExcerptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ArticleToExcerptArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToExcerptHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToImageArgs {
    maxWidth?: number;
    maxHeight?: number;
    crop?: CropRegion;
    scale?: number;
  }
  export interface ArticleToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ArticleToImageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToPublishedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NodeTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | 'Blog' | 'Comment' | 'Collection' | 'Product' | 'Metafield' | 'ProductVariant' | 'ProductOption' | 'MailingAddress' | 'Checkout' | 'AppliedGiftCard' | 'CheckoutLineItem' | 'Order' | 'Page' | 'ShopPolicy' | 'Payment' | 'ExternalVideo' | 'MediaImage' | 'Model3d' | 'Video';
  }
  export interface ArticleAuthorTypeResolver<TParent = any> {
    bio?: ArticleAuthorToBioResolver<TParent>;
    email?: ArticleAuthorToEmailResolver<TParent>;
    firstName?: ArticleAuthorToFirstNameResolver<TParent>;
    lastName?: ArticleAuthorToLastNameResolver<TParent>;
    name?: ArticleAuthorToNameResolver<TParent>;
  }
  
  export interface ArticleAuthorToBioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleAuthorToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleAuthorToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleAuthorToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleAuthorToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogTypeResolver<TParent = any> {
    articleByHandle?: BlogToArticleByHandleResolver<TParent>;
    articles?: BlogToArticlesResolver<TParent>;
    authors?: BlogToAuthorsResolver<TParent>;
    handle?: BlogToHandleResolver<TParent>;
    id?: BlogToIdResolver<TParent>;
    seo?: BlogToSeoResolver<TParent>;
    title?: BlogToTitleResolver<TParent>;
    url?: BlogToUrlResolver<TParent>;
  }
  
  export interface BlogToArticleByHandleArgs {
    handle: string;
  }
  export interface BlogToArticleByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: BlogToArticleByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogToArticlesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ArticleSortKeys;
    query?: string;
  }
  export interface BlogToArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: BlogToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogToAuthorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogToSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SEOTypeResolver<TParent = any> {
    description?: SEOToDescriptionResolver<TParent>;
    title?: SEOToTitleResolver<TParent>;
  }
  
  export interface SEOToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SEOToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentConnectionTypeResolver<TParent = any> {
    edges?: CommentConnectionToEdgesResolver<TParent>;
    pageInfo?: CommentConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CommentConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEdgeTypeResolver<TParent = any> {
    cursor?: CommentEdgeToCursorResolver<TParent>;
    node?: CommentEdgeToNodeResolver<TParent>;
  }
  
  export interface CommentEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentTypeResolver<TParent = any> {
    author?: CommentToAuthorResolver<TParent>;
    content?: CommentToContentResolver<TParent>;
    contentHtml?: CommentToContentHtmlResolver<TParent>;
    id?: CommentToIdResolver<TParent>;
  }
  
  export interface CommentToAuthorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentToContentArgs {
    truncateAt?: number;
  }
  export interface CommentToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CommentToContentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentToContentHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentAuthorTypeResolver<TParent = any> {
    email?: CommentAuthorToEmailResolver<TParent>;
    name?: CommentAuthorToNameResolver<TParent>;
  }
  
  export interface CommentAuthorToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentAuthorToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageInfoTypeResolver<TParent = any> {
    hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
    hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  }
  
  export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageTypeResolver<TParent = any> {
    altText?: ImageToAltTextResolver<TParent>;
    height?: ImageToHeightResolver<TParent>;
    id?: ImageToIdResolver<TParent>;
    originalSrc?: ImageToOriginalSrcResolver<TParent>;
    src?: ImageToSrcResolver<TParent>;
    transformedSrc?: ImageToTransformedSrcResolver<TParent>;
    width?: ImageToWidthResolver<TParent>;
  }
  
  export interface ImageToAltTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToOriginalSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToTransformedSrcArgs {
    maxWidth?: number;
    maxHeight?: number;
    crop?: CropRegion;
    scale?: number;
    preferredContentType?: ImageContentType;
  }
  export interface ImageToTransformedSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ImageToTransformedSrcArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogConnectionTypeResolver<TParent = any> {
    edges?: BlogConnectionToEdgesResolver<TParent>;
    pageInfo?: BlogConnectionToPageInfoResolver<TParent>;
  }
  
  export interface BlogConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogEdgeTypeResolver<TParent = any> {
    cursor?: BlogEdgeToCursorResolver<TParent>;
    node?: BlogEdgeToNodeResolver<TParent>;
  }
  
  export interface BlogEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BlogEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionTypeResolver<TParent = any> {
    description?: CollectionToDescriptionResolver<TParent>;
    descriptionHtml?: CollectionToDescriptionHtmlResolver<TParent>;
    handle?: CollectionToHandleResolver<TParent>;
    id?: CollectionToIdResolver<TParent>;
    image?: CollectionToImageResolver<TParent>;
    products?: CollectionToProductsResolver<TParent>;
    title?: CollectionToTitleResolver<TParent>;
    updatedAt?: CollectionToUpdatedAtResolver<TParent>;
  }
  
  export interface CollectionToDescriptionArgs {
    truncateAt?: number;
  }
  export interface CollectionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToDescriptionHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToImageArgs {
    maxWidth?: number;
    maxHeight?: number;
    crop?: CropRegion;
    scale?: number;
  }
  export interface CollectionToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToImageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductCollectionSortKeys;
  }
  export interface CollectionToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionTypeResolver<TParent = any> {
    edges?: ProductConnectionToEdgesResolver<TParent>;
    pageInfo?: ProductConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductEdgeTypeResolver<TParent = any> {
    cursor?: ProductEdgeToCursorResolver<TParent>;
    node?: ProductEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTypeResolver<TParent = any> {
    availableForSale?: ProductToAvailableForSaleResolver<TParent>;
    collections?: ProductToCollectionsResolver<TParent>;
    compareAtPriceRange?: ProductToCompareAtPriceRangeResolver<TParent>;
    createdAt?: ProductToCreatedAtResolver<TParent>;
    description?: ProductToDescriptionResolver<TParent>;
    descriptionHtml?: ProductToDescriptionHtmlResolver<TParent>;
    handle?: ProductToHandleResolver<TParent>;
    id?: ProductToIdResolver<TParent>;
    images?: ProductToImagesResolver<TParent>;
    media?: ProductToMediaResolver<TParent>;
    metafield?: ProductToMetafieldResolver<TParent>;
    metafields?: ProductToMetafieldsResolver<TParent>;
    onlineStoreUrl?: ProductToOnlineStoreUrlResolver<TParent>;
    options?: ProductToOptionsResolver<TParent>;
    presentmentPriceRanges?: ProductToPresentmentPriceRangesResolver<TParent>;
    priceRange?: ProductToPriceRangeResolver<TParent>;
    productType?: ProductToProductTypeResolver<TParent>;
    publishedAt?: ProductToPublishedAtResolver<TParent>;
    seo?: ProductToSeoResolver<TParent>;
    tags?: ProductToTagsResolver<TParent>;
    title?: ProductToTitleResolver<TParent>;
    totalInventory?: ProductToTotalInventoryResolver<TParent>;
    updatedAt?: ProductToUpdatedAtResolver<TParent>;
    variantBySelectedOptions?: ProductToVariantBySelectedOptionsResolver<TParent>;
    variants?: ProductToVariantsResolver<TParent>;
    vendor?: ProductToVendorResolver<TParent>;
  }
  
  export interface ProductToAvailableForSaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCompareAtPriceRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDescriptionArgs {
    truncateAt?: number;
  }
  export interface ProductToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDescriptionHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToImagesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductImageSortKeys;
    maxWidth?: number;
    maxHeight?: number;
    crop?: CropRegion;
    scale?: number;
  }
  export interface ProductToImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToImagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMediaArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductMediaSortKeys;
  }
  export interface ProductToMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface ProductToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToOnlineStoreUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToOptionsArgs {
    first?: number;
  }
  export interface ProductToOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToOptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPresentmentPriceRangesArgs {
    presentmentCurrencies?: Array<CurrencyCode>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToPresentmentPriceRangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPresentmentPriceRangesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPriceRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToProductTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublishedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTotalInventoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToVariantBySelectedOptionsArgs {
    selectedOptions: Array<SelectedOptionInput>;
  }
  export interface ProductToVariantBySelectedOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToVariantBySelectedOptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductVariantSortKeys;
  }
  export interface ProductToVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface HasMetafieldsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Product' | 'ProductVariant';
  }
  export interface MetafieldTypeResolver<TParent = any> {
    createdAt?: MetafieldToCreatedAtResolver<TParent>;
    description?: MetafieldToDescriptionResolver<TParent>;
    id?: MetafieldToIdResolver<TParent>;
    key?: MetafieldToKeyResolver<TParent>;
    namespace?: MetafieldToNamespaceResolver<TParent>;
    parentResource?: MetafieldToParentResourceResolver<TParent>;
    updatedAt?: MetafieldToUpdatedAtResolver<TParent>;
    value?: MetafieldToValueResolver<TParent>;
    valueType?: MetafieldToValueTypeResolver<TParent>;
  }
  
  export interface MetafieldToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToNamespaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToParentResourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToValueTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldParentResourceTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Product' | 'ProductVariant';
  }
  export interface ProductVariantTypeResolver<TParent = any> {
    available?: ProductVariantToAvailableResolver<TParent>;
    availableForSale?: ProductVariantToAvailableForSaleResolver<TParent>;
    compareAtPrice?: ProductVariantToCompareAtPriceResolver<TParent>;
    compareAtPriceV2?: ProductVariantToCompareAtPriceV2Resolver<TParent>;
    currentlyNotInStock?: ProductVariantToCurrentlyNotInStockResolver<TParent>;
    id?: ProductVariantToIdResolver<TParent>;
    image?: ProductVariantToImageResolver<TParent>;
    metafield?: ProductVariantToMetafieldResolver<TParent>;
    metafields?: ProductVariantToMetafieldsResolver<TParent>;
    presentmentPrices?: ProductVariantToPresentmentPricesResolver<TParent>;
    presentmentUnitPrices?: ProductVariantToPresentmentUnitPricesResolver<TParent>;
    price?: ProductVariantToPriceResolver<TParent>;
    priceV2?: ProductVariantToPriceV2Resolver<TParent>;
    product?: ProductVariantToProductResolver<TParent>;
    quantityAvailable?: ProductVariantToQuantityAvailableResolver<TParent>;
    requiresShipping?: ProductVariantToRequiresShippingResolver<TParent>;
    selectedOptions?: ProductVariantToSelectedOptionsResolver<TParent>;
    sku?: ProductVariantToSkuResolver<TParent>;
    title?: ProductVariantToTitleResolver<TParent>;
    unitPrice?: ProductVariantToUnitPriceResolver<TParent>;
    unitPriceMeasurement?: ProductVariantToUnitPriceMeasurementResolver<TParent>;
    weight?: ProductVariantToWeightResolver<TParent>;
    weightUnit?: ProductVariantToWeightUnitResolver<TParent>;
  }
  
  export interface ProductVariantToAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToAvailableForSaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToCompareAtPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToCurrentlyNotInStockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToImageArgs {
    maxWidth?: number;
    maxHeight?: number;
    crop?: CropRegion;
    scale?: number;
  }
  export interface ProductVariantToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToImageArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface ProductVariantToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPresentmentPricesArgs {
    presentmentCurrencies?: Array<CurrencyCode>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToPresentmentPricesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToPresentmentPricesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPresentmentUnitPricesArgs {
    presentmentCurrencies?: Array<CurrencyCode>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToPresentmentUnitPricesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToPresentmentUnitPricesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToQuantityAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToSelectedOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToUnitPriceMeasurementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToWeightUnitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2TypeResolver<TParent = any> {
    amount?: MoneyV2ToAmountResolver<TParent>;
    currencyCode?: MoneyV2ToCurrencyCodeResolver<TParent>;
  }
  
  export interface MoneyV2ToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2ToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldConnectionTypeResolver<TParent = any> {
    edges?: MetafieldConnectionToEdgesResolver<TParent>;
    pageInfo?: MetafieldConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetafieldConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldEdgeTypeResolver<TParent = any> {
    cursor?: MetafieldEdgeToCursorResolver<TParent>;
    node?: MetafieldEdgeToNodeResolver<TParent>;
  }
  
  export interface MetafieldEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairConnectionTypeResolver<TParent = any> {
    edges?: ProductVariantPricePairConnectionToEdgesResolver<TParent>;
    pageInfo?: ProductVariantPricePairConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductVariantPricePairConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairEdgeTypeResolver<TParent = any> {
    cursor?: ProductVariantPricePairEdgeToCursorResolver<TParent>;
    node?: ProductVariantPricePairEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductVariantPricePairEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairTypeResolver<TParent = any> {
    compareAtPrice?: ProductVariantPricePairToCompareAtPriceResolver<TParent>;
    price?: ProductVariantPricePairToPriceResolver<TParent>;
  }
  
  export interface ProductVariantPricePairToCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2ConnectionTypeResolver<TParent = any> {
    edges?: MoneyV2ConnectionToEdgesResolver<TParent>;
    pageInfo?: MoneyV2ConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MoneyV2ConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2ConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2EdgeTypeResolver<TParent = any> {
    cursor?: MoneyV2EdgeToCursorResolver<TParent>;
    node?: MoneyV2EdgeToNodeResolver<TParent>;
  }
  
  export interface MoneyV2EdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2EdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SelectedOptionTypeResolver<TParent = any> {
    name?: SelectedOptionToNameResolver<TParent>;
    value?: SelectedOptionToValueResolver<TParent>;
  }
  
  export interface SelectedOptionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SelectedOptionToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnitPriceMeasurementTypeResolver<TParent = any> {
    measuredType?: UnitPriceMeasurementToMeasuredTypeResolver<TParent>;
    quantityUnit?: UnitPriceMeasurementToQuantityUnitResolver<TParent>;
    quantityValue?: UnitPriceMeasurementToQuantityValueResolver<TParent>;
    referenceUnit?: UnitPriceMeasurementToReferenceUnitResolver<TParent>;
    referenceValue?: UnitPriceMeasurementToReferenceValueResolver<TParent>;
  }
  
  export interface UnitPriceMeasurementToMeasuredTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnitPriceMeasurementToQuantityUnitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnitPriceMeasurementToQuantityValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnitPriceMeasurementToReferenceUnitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnitPriceMeasurementToReferenceValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionConnectionTypeResolver<TParent = any> {
    edges?: CollectionConnectionToEdgesResolver<TParent>;
    pageInfo?: CollectionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CollectionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionEdgeTypeResolver<TParent = any> {
    cursor?: CollectionEdgeToCursorResolver<TParent>;
    node?: CollectionEdgeToNodeResolver<TParent>;
  }
  
  export interface CollectionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeTypeResolver<TParent = any> {
    maxVariantPrice?: ProductPriceRangeToMaxVariantPriceResolver<TParent>;
    minVariantPrice?: ProductPriceRangeToMinVariantPriceResolver<TParent>;
  }
  
  export interface ProductPriceRangeToMaxVariantPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeToMinVariantPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageConnectionTypeResolver<TParent = any> {
    edges?: ImageConnectionToEdgesResolver<TParent>;
    pageInfo?: ImageConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ImageConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageEdgeTypeResolver<TParent = any> {
    cursor?: ImageEdgeToCursorResolver<TParent>;
    node?: ImageEdgeToNodeResolver<TParent>;
  }
  
  export interface ImageEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaConnectionTypeResolver<TParent = any> {
    edges?: MediaConnectionToEdgesResolver<TParent>;
    pageInfo?: MediaConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MediaConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaEdgeTypeResolver<TParent = any> {
    cursor?: MediaEdgeToCursorResolver<TParent>;
    node?: MediaEdgeToNodeResolver<TParent>;
  }
  
  export interface MediaEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'ExternalVideo' | 'MediaImage' | 'Model3d' | 'Video';
  }
  export interface ProductOptionTypeResolver<TParent = any> {
    id?: ProductOptionToIdResolver<TParent>;
    name?: ProductOptionToNameResolver<TParent>;
    values?: ProductOptionToValuesResolver<TParent>;
  }
  
  export interface ProductOptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductOptionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductOptionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeConnectionTypeResolver<TParent = any> {
    edges?: ProductPriceRangeConnectionToEdgesResolver<TParent>;
    pageInfo?: ProductPriceRangeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductPriceRangeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeEdgeTypeResolver<TParent = any> {
    cursor?: ProductPriceRangeEdgeToCursorResolver<TParent>;
    node?: ProductPriceRangeEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductPriceRangeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantConnectionTypeResolver<TParent = any> {
    edges?: ProductVariantConnectionToEdgesResolver<TParent>;
    pageInfo?: ProductVariantConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductVariantConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantEdgeTypeResolver<TParent = any> {
    cursor?: ProductVariantEdgeToCursorResolver<TParent>;
    node?: ProductVariantEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductVariantEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerTypeResolver<TParent = any> {
    acceptsMarketing?: CustomerToAcceptsMarketingResolver<TParent>;
    addresses?: CustomerToAddressesResolver<TParent>;
    createdAt?: CustomerToCreatedAtResolver<TParent>;
    defaultAddress?: CustomerToDefaultAddressResolver<TParent>;
    displayName?: CustomerToDisplayNameResolver<TParent>;
    email?: CustomerToEmailResolver<TParent>;
    firstName?: CustomerToFirstNameResolver<TParent>;
    id?: CustomerToIdResolver<TParent>;
    lastIncompleteCheckout?: CustomerToLastIncompleteCheckoutResolver<TParent>;
    lastName?: CustomerToLastNameResolver<TParent>;
    orders?: CustomerToOrdersResolver<TParent>;
    phone?: CustomerToPhoneResolver<TParent>;
    tags?: CustomerToTagsResolver<TParent>;
    updatedAt?: CustomerToUpdatedAtResolver<TParent>;
  }
  
  export interface CustomerToAcceptsMarketingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToAddressesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerToAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToAddressesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToDefaultAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToLastIncompleteCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
    query?: string;
  }
  export interface CustomerToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressConnectionTypeResolver<TParent = any> {
    edges?: MailingAddressConnectionToEdgesResolver<TParent>;
    pageInfo?: MailingAddressConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MailingAddressConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressEdgeTypeResolver<TParent = any> {
    cursor?: MailingAddressEdgeToCursorResolver<TParent>;
    node?: MailingAddressEdgeToNodeResolver<TParent>;
  }
  
  export interface MailingAddressEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressTypeResolver<TParent = any> {
    address1?: MailingAddressToAddress1Resolver<TParent>;
    address2?: MailingAddressToAddress2Resolver<TParent>;
    city?: MailingAddressToCityResolver<TParent>;
    company?: MailingAddressToCompanyResolver<TParent>;
    country?: MailingAddressToCountryResolver<TParent>;
    countryCode?: MailingAddressToCountryCodeResolver<TParent>;
    countryCodeV2?: MailingAddressToCountryCodeV2Resolver<TParent>;
    firstName?: MailingAddressToFirstNameResolver<TParent>;
    formatted?: MailingAddressToFormattedResolver<TParent>;
    formattedArea?: MailingAddressToFormattedAreaResolver<TParent>;
    id?: MailingAddressToIdResolver<TParent>;
    lastName?: MailingAddressToLastNameResolver<TParent>;
    latitude?: MailingAddressToLatitudeResolver<TParent>;
    longitude?: MailingAddressToLongitudeResolver<TParent>;
    name?: MailingAddressToNameResolver<TParent>;
    phone?: MailingAddressToPhoneResolver<TParent>;
    province?: MailingAddressToProvinceResolver<TParent>;
    provinceCode?: MailingAddressToProvinceCodeResolver<TParent>;
    zip?: MailingAddressToZipResolver<TParent>;
  }
  
  export interface MailingAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCountryCodeV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToFormattedArgs {
    withName?: boolean;
    withCompany?: boolean;
  }
  export interface MailingAddressToFormattedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MailingAddressToFormattedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToFormattedAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToLatitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToLongitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutTypeResolver<TParent = any> {
    appliedGiftCards?: CheckoutToAppliedGiftCardsResolver<TParent>;
    availableShippingRates?: CheckoutToAvailableShippingRatesResolver<TParent>;
    completedAt?: CheckoutToCompletedAtResolver<TParent>;
    createdAt?: CheckoutToCreatedAtResolver<TParent>;
    currencyCode?: CheckoutToCurrencyCodeResolver<TParent>;
    customAttributes?: CheckoutToCustomAttributesResolver<TParent>;
    customer?: CheckoutToCustomerResolver<TParent>;
    discountApplications?: CheckoutToDiscountApplicationsResolver<TParent>;
    email?: CheckoutToEmailResolver<TParent>;
    id?: CheckoutToIdResolver<TParent>;
    lineItems?: CheckoutToLineItemsResolver<TParent>;
    lineItemsSubtotalPrice?: CheckoutToLineItemsSubtotalPriceResolver<TParent>;
    note?: CheckoutToNoteResolver<TParent>;
    order?: CheckoutToOrderResolver<TParent>;
    orderStatusUrl?: CheckoutToOrderStatusUrlResolver<TParent>;
    paymentDue?: CheckoutToPaymentDueResolver<TParent>;
    paymentDueV2?: CheckoutToPaymentDueV2Resolver<TParent>;
    ready?: CheckoutToReadyResolver<TParent>;
    requiresShipping?: CheckoutToRequiresShippingResolver<TParent>;
    shippingAddress?: CheckoutToShippingAddressResolver<TParent>;
    shippingDiscountAllocations?: CheckoutToShippingDiscountAllocationsResolver<TParent>;
    shippingLine?: CheckoutToShippingLineResolver<TParent>;
    subtotalPrice?: CheckoutToSubtotalPriceResolver<TParent>;
    subtotalPriceV2?: CheckoutToSubtotalPriceV2Resolver<TParent>;
    taxExempt?: CheckoutToTaxExemptResolver<TParent>;
    taxesIncluded?: CheckoutToTaxesIncludedResolver<TParent>;
    totalPrice?: CheckoutToTotalPriceResolver<TParent>;
    totalPriceV2?: CheckoutToTotalPriceV2Resolver<TParent>;
    totalTax?: CheckoutToTotalTaxResolver<TParent>;
    totalTaxV2?: CheckoutToTotalTaxV2Resolver<TParent>;
    updatedAt?: CheckoutToUpdatedAtResolver<TParent>;
    webUrl?: CheckoutToWebUrlResolver<TParent>;
  }
  
  export interface CheckoutToAppliedGiftCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToAvailableShippingRatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToCompletedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToDiscountApplicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CheckoutToDiscountApplicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CheckoutToDiscountApplicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CheckoutToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CheckoutToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToLineItemsSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToOrderStatusUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToPaymentDueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToPaymentDueV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToShippingDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToShippingLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToSubtotalPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToTaxExemptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToTaxesIncludedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToTotalPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToTotalTaxV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutToWebUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppliedGiftCardTypeResolver<TParent = any> {
    amountUsed?: AppliedGiftCardToAmountUsedResolver<TParent>;
    amountUsedV2?: AppliedGiftCardToAmountUsedV2Resolver<TParent>;
    balance?: AppliedGiftCardToBalanceResolver<TParent>;
    balanceV2?: AppliedGiftCardToBalanceV2Resolver<TParent>;
    id?: AppliedGiftCardToIdResolver<TParent>;
    lastCharacters?: AppliedGiftCardToLastCharactersResolver<TParent>;
    presentmentAmountUsed?: AppliedGiftCardToPresentmentAmountUsedResolver<TParent>;
  }
  
  export interface AppliedGiftCardToAmountUsedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppliedGiftCardToAmountUsedV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppliedGiftCardToBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppliedGiftCardToBalanceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppliedGiftCardToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppliedGiftCardToLastCharactersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppliedGiftCardToPresentmentAmountUsedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AvailableShippingRatesTypeResolver<TParent = any> {
    ready?: AvailableShippingRatesToReadyResolver<TParent>;
    shippingRates?: AvailableShippingRatesToShippingRatesResolver<TParent>;
  }
  
  export interface AvailableShippingRatesToReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AvailableShippingRatesToShippingRatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRateTypeResolver<TParent = any> {
    handle?: ShippingRateToHandleResolver<TParent>;
    price?: ShippingRateToPriceResolver<TParent>;
    priceV2?: ShippingRateToPriceV2Resolver<TParent>;
    title?: ShippingRateToTitleResolver<TParent>;
  }
  
  export interface ShippingRateToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRateToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRateToPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRateToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AttributeTypeResolver<TParent = any> {
    key?: AttributeToKeyResolver<TParent>;
    value?: AttributeToValueResolver<TParent>;
  }
  
  export interface AttributeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AttributeToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationConnectionTypeResolver<TParent = any> {
    edges?: DiscountApplicationConnectionToEdgesResolver<TParent>;
    pageInfo?: DiscountApplicationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountApplicationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationEdgeTypeResolver<TParent = any> {
    cursor?: DiscountApplicationEdgeToCursorResolver<TParent>;
    node?: DiscountApplicationEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountApplicationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AutomaticDiscountApplication' | 'DiscountCodeApplication' | 'ManualDiscountApplication' | 'ScriptDiscountApplication';
  }
  export interface PricingValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MoneyV2' | 'PricingPercentageValue';
  }
  export interface PricingPercentageValueTypeResolver<TParent = any> {
    percentage?: PricingPercentageValueToPercentageResolver<TParent>;
  }
  
  export interface PricingPercentageValueToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemConnectionTypeResolver<TParent = any> {
    edges?: CheckoutLineItemConnectionToEdgesResolver<TParent>;
    pageInfo?: CheckoutLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CheckoutLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemEdgeTypeResolver<TParent = any> {
    cursor?: CheckoutLineItemEdgeToCursorResolver<TParent>;
    node?: CheckoutLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface CheckoutLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemTypeResolver<TParent = any> {
    customAttributes?: CheckoutLineItemToCustomAttributesResolver<TParent>;
    discountAllocations?: CheckoutLineItemToDiscountAllocationsResolver<TParent>;
    id?: CheckoutLineItemToIdResolver<TParent>;
    quantity?: CheckoutLineItemToQuantityResolver<TParent>;
    title?: CheckoutLineItemToTitleResolver<TParent>;
    unitPrice?: CheckoutLineItemToUnitPriceResolver<TParent>;
    variant?: CheckoutLineItemToVariantResolver<TParent>;
  }
  
  export interface CheckoutLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemToUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAllocationTypeResolver<TParent = any> {
    allocatedAmount?: DiscountAllocationToAllocatedAmountResolver<TParent>;
    discountApplication?: DiscountAllocationToDiscountApplicationResolver<TParent>;
  }
  
  export interface DiscountAllocationToAllocatedAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAllocationToDiscountApplicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTypeResolver<TParent = any> {
    cancelReason?: OrderToCancelReasonResolver<TParent>;
    canceledAt?: OrderToCanceledAtResolver<TParent>;
    currencyCode?: OrderToCurrencyCodeResolver<TParent>;
    currentSubtotalPrice?: OrderToCurrentSubtotalPriceResolver<TParent>;
    currentTotalPrice?: OrderToCurrentTotalPriceResolver<TParent>;
    currentTotalTax?: OrderToCurrentTotalTaxResolver<TParent>;
    customerLocale?: OrderToCustomerLocaleResolver<TParent>;
    customerUrl?: OrderToCustomerUrlResolver<TParent>;
    discountApplications?: OrderToDiscountApplicationsResolver<TParent>;
    edited?: OrderToEditedResolver<TParent>;
    email?: OrderToEmailResolver<TParent>;
    financialStatus?: OrderToFinancialStatusResolver<TParent>;
    fulfillmentStatus?: OrderToFulfillmentStatusResolver<TParent>;
    id?: OrderToIdResolver<TParent>;
    lineItems?: OrderToLineItemsResolver<TParent>;
    name?: OrderToNameResolver<TParent>;
    orderNumber?: OrderToOrderNumberResolver<TParent>;
    originalTotalPrice?: OrderToOriginalTotalPriceResolver<TParent>;
    phone?: OrderToPhoneResolver<TParent>;
    processedAt?: OrderToProcessedAtResolver<TParent>;
    shippingAddress?: OrderToShippingAddressResolver<TParent>;
    shippingDiscountAllocations?: OrderToShippingDiscountAllocationsResolver<TParent>;
    statusUrl?: OrderToStatusUrlResolver<TParent>;
    subtotalPrice?: OrderToSubtotalPriceResolver<TParent>;
    subtotalPriceV2?: OrderToSubtotalPriceV2Resolver<TParent>;
    successfulFulfillments?: OrderToSuccessfulFulfillmentsResolver<TParent>;
    totalPrice?: OrderToTotalPriceResolver<TParent>;
    totalPriceV2?: OrderToTotalPriceV2Resolver<TParent>;
    totalRefunded?: OrderToTotalRefundedResolver<TParent>;
    totalRefundedV2?: OrderToTotalRefundedV2Resolver<TParent>;
    totalShippingPrice?: OrderToTotalShippingPriceResolver<TParent>;
    totalShippingPriceV2?: OrderToTotalShippingPriceV2Resolver<TParent>;
    totalTax?: OrderToTotalTaxResolver<TParent>;
    totalTaxV2?: OrderToTotalTaxV2Resolver<TParent>;
  }
  
  export interface OrderToCancelReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCanceledAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomerLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomerUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDiscountApplicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToDiscountApplicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToDiscountApplicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToEditedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToFinancialStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToFulfillmentStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToOrderNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToOriginalTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToProcessedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToShippingDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToStatusUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSubtotalPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSuccessfulFulfillmentsArgs {
    first?: number;
  }
  export interface OrderToSuccessfulFulfillmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToSuccessfulFulfillmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalRefundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalRefundedV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalShippingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalShippingPriceV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalTaxV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemConnectionTypeResolver<TParent = any> {
    edges?: OrderLineItemConnectionToEdgesResolver<TParent>;
    pageInfo?: OrderLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface OrderLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemEdgeTypeResolver<TParent = any> {
    cursor?: OrderLineItemEdgeToCursorResolver<TParent>;
    node?: OrderLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface OrderLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemTypeResolver<TParent = any> {
    currentQuantity?: OrderLineItemToCurrentQuantityResolver<TParent>;
    customAttributes?: OrderLineItemToCustomAttributesResolver<TParent>;
    discountAllocations?: OrderLineItemToDiscountAllocationsResolver<TParent>;
    discountedTotalPrice?: OrderLineItemToDiscountedTotalPriceResolver<TParent>;
    originalTotalPrice?: OrderLineItemToOriginalTotalPriceResolver<TParent>;
    quantity?: OrderLineItemToQuantityResolver<TParent>;
    title?: OrderLineItemToTitleResolver<TParent>;
    variant?: OrderLineItemToVariantResolver<TParent>;
  }
  
  export interface OrderLineItemToCurrentQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemToDiscountedTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemToOriginalTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderLineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTypeResolver<TParent = any> {
    fulfillmentLineItems?: FulfillmentToFulfillmentLineItemsResolver<TParent>;
    trackingCompany?: FulfillmentToTrackingCompanyResolver<TParent>;
    trackingInfo?: FulfillmentToTrackingInfoResolver<TParent>;
  }
  
  export interface FulfillmentToFulfillmentLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentToFulfillmentLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentToFulfillmentLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToTrackingCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToTrackingInfoArgs {
    first?: number;
  }
  export interface FulfillmentToTrackingInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentToTrackingInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentLineItemConnectionToEdgesResolver<TParent>;
    pageInfo?: FulfillmentLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentLineItemEdgeToCursorResolver<TParent>;
    node?: FulfillmentLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemTypeResolver<TParent = any> {
    lineItem?: FulfillmentLineItemToLineItemResolver<TParent>;
    quantity?: FulfillmentLineItemToQuantityResolver<TParent>;
  }
  
  export interface FulfillmentLineItemToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTrackingInfoTypeResolver<TParent = any> {
    number?: FulfillmentTrackingInfoToNumberResolver<TParent>;
    url?: FulfillmentTrackingInfoToUrlResolver<TParent>;
  }
  
  export interface FulfillmentTrackingInfoToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTrackingInfoToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderConnectionTypeResolver<TParent = any> {
    edges?: OrderConnectionToEdgesResolver<TParent>;
    pageInfo?: OrderConnectionToPageInfoResolver<TParent>;
  }
  
  export interface OrderConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEdgeTypeResolver<TParent = any> {
    cursor?: OrderEdgeToCursorResolver<TParent>;
    node?: OrderEdgeToNodeResolver<TParent>;
  }
  
  export interface OrderEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageTypeResolver<TParent = any> {
    body?: PageToBodyResolver<TParent>;
    bodySummary?: PageToBodySummaryResolver<TParent>;
    createdAt?: PageToCreatedAtResolver<TParent>;
    handle?: PageToHandleResolver<TParent>;
    id?: PageToIdResolver<TParent>;
    seo?: PageToSeoResolver<TParent>;
    title?: PageToTitleResolver<TParent>;
    updatedAt?: PageToUpdatedAtResolver<TParent>;
    url?: PageToUrlResolver<TParent>;
  }
  
  export interface PageToBodyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToBodySummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionTypeResolver<TParent = any> {
    edges?: PageConnectionToEdgesResolver<TParent>;
    pageInfo?: PageConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PageConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageEdgeTypeResolver<TParent = any> {
    cursor?: PageEdgeToCursorResolver<TParent>;
    node?: PageEdgeToNodeResolver<TParent>;
  }
  
  export interface PageEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringConnectionTypeResolver<TParent = any> {
    edges?: StringConnectionToEdgesResolver<TParent>;
    pageInfo?: StringConnectionToPageInfoResolver<TParent>;
  }
  
  export interface StringConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringEdgeTypeResolver<TParent = any> {
    cursor?: StringEdgeToCursorResolver<TParent>;
    node?: StringEdgeToNodeResolver<TParent>;
  }
  
  export interface StringEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ApiVersionTypeResolver<TParent = any> {
    displayName?: ApiVersionToDisplayNameResolver<TParent>;
    handle?: ApiVersionToHandleResolver<TParent>;
    supported?: ApiVersionToSupportedResolver<TParent>;
  }
  
  export interface ApiVersionToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ApiVersionToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ApiVersionToSupportedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopTypeResolver<TParent = any> {
    articles?: ShopToArticlesResolver<TParent>;
    blogs?: ShopToBlogsResolver<TParent>;
    collectionByHandle?: ShopToCollectionByHandleResolver<TParent>;
    collections?: ShopToCollectionsResolver<TParent>;
    currencyCode?: ShopToCurrencyCodeResolver<TParent>;
    description?: ShopToDescriptionResolver<TParent>;
    moneyFormat?: ShopToMoneyFormatResolver<TParent>;
    name?: ShopToNameResolver<TParent>;
    paymentSettings?: ShopToPaymentSettingsResolver<TParent>;
    primaryDomain?: ShopToPrimaryDomainResolver<TParent>;
    privacyPolicy?: ShopToPrivacyPolicyResolver<TParent>;
    productByHandle?: ShopToProductByHandleResolver<TParent>;
    productTags?: ShopToProductTagsResolver<TParent>;
    productTypes?: ShopToProductTypesResolver<TParent>;
    products?: ShopToProductsResolver<TParent>;
    refundPolicy?: ShopToRefundPolicyResolver<TParent>;
    shippingPolicy?: ShopToShippingPolicyResolver<TParent>;
    shipsToCountries?: ShopToShipsToCountriesResolver<TParent>;
    shopifyPaymentsAccountId?: ShopToShopifyPaymentsAccountIdResolver<TParent>;
    termsOfService?: ShopToTermsOfServiceResolver<TParent>;
  }
  
  export interface ShopToArticlesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ArticleSortKeys;
    query?: string;
  }
  export interface ShopToArticlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToArticlesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToBlogsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: BlogSortKeys;
    query?: string;
  }
  export interface ShopToBlogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToBlogsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCollectionByHandleArgs {
    handle: string;
  }
  export interface ShopToCollectionByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCollectionByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CollectionSortKeys;
    query?: string;
  }
  export interface ShopToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToMoneyFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPaymentSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPrimaryDomainResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPrivacyPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductByHandleArgs {
    handle: string;
  }
  export interface ShopToProductByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductTagsArgs {
    first: number;
  }
  export interface ShopToProductTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductTypesArgs {
    first: number;
  }
  export interface ShopToProductTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductSortKeys;
    query?: string;
  }
  export interface ShopToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToRefundPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToShippingPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToShipsToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToShopifyPaymentsAccountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTermsOfServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsTypeResolver<TParent = any> {
    acceptedCardBrands?: PaymentSettingsToAcceptedCardBrandsResolver<TParent>;
    cardVaultUrl?: PaymentSettingsToCardVaultUrlResolver<TParent>;
    countryCode?: PaymentSettingsToCountryCodeResolver<TParent>;
    currencyCode?: PaymentSettingsToCurrencyCodeResolver<TParent>;
    enabledPresentmentCurrencies?: PaymentSettingsToEnabledPresentmentCurrenciesResolver<TParent>;
    shopifyPaymentsAccountId?: PaymentSettingsToShopifyPaymentsAccountIdResolver<TParent>;
    supportedDigitalWallets?: PaymentSettingsToSupportedDigitalWalletsResolver<TParent>;
  }
  
  export interface PaymentSettingsToAcceptedCardBrandsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsToCardVaultUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsToEnabledPresentmentCurrenciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsToShopifyPaymentsAccountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsToSupportedDigitalWalletsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainTypeResolver<TParent = any> {
    host?: DomainToHostResolver<TParent>;
    sslEnabled?: DomainToSslEnabledResolver<TParent>;
    url?: DomainToUrlResolver<TParent>;
  }
  
  export interface DomainToHostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainToSslEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyTypeResolver<TParent = any> {
    body?: ShopPolicyToBodyResolver<TParent>;
    handle?: ShopPolicyToHandleResolver<TParent>;
    id?: ShopPolicyToIdResolver<TParent>;
    title?: ShopPolicyToTitleResolver<TParent>;
    url?: ShopPolicyToUrlResolver<TParent>;
  }
  
  export interface ShopPolicyToBodyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationTypeResolver<TParent = any> {
    checkoutAttributesUpdate?: MutationToCheckoutAttributesUpdateResolver<TParent>;
    checkoutAttributesUpdateV2?: MutationToCheckoutAttributesUpdateV2Resolver<TParent>;
    checkoutCompleteFree?: MutationToCheckoutCompleteFreeResolver<TParent>;
    checkoutCompleteWithCreditCard?: MutationToCheckoutCompleteWithCreditCardResolver<TParent>;
    checkoutCompleteWithCreditCardV2?: MutationToCheckoutCompleteWithCreditCardV2Resolver<TParent>;
    checkoutCompleteWithTokenizedPayment?: MutationToCheckoutCompleteWithTokenizedPaymentResolver<TParent>;
    checkoutCompleteWithTokenizedPaymentV2?: MutationToCheckoutCompleteWithTokenizedPaymentV2Resolver<TParent>;
    checkoutCompleteWithTokenizedPaymentV3?: MutationToCheckoutCompleteWithTokenizedPaymentV3Resolver<TParent>;
    checkoutCreate?: MutationToCheckoutCreateResolver<TParent>;
    checkoutCustomerAssociate?: MutationToCheckoutCustomerAssociateResolver<TParent>;
    checkoutCustomerAssociateV2?: MutationToCheckoutCustomerAssociateV2Resolver<TParent>;
    checkoutCustomerDisassociate?: MutationToCheckoutCustomerDisassociateResolver<TParent>;
    checkoutCustomerDisassociateV2?: MutationToCheckoutCustomerDisassociateV2Resolver<TParent>;
    checkoutDiscountCodeApply?: MutationToCheckoutDiscountCodeApplyResolver<TParent>;
    checkoutDiscountCodeApplyV2?: MutationToCheckoutDiscountCodeApplyV2Resolver<TParent>;
    checkoutDiscountCodeRemove?: MutationToCheckoutDiscountCodeRemoveResolver<TParent>;
    checkoutEmailUpdate?: MutationToCheckoutEmailUpdateResolver<TParent>;
    checkoutEmailUpdateV2?: MutationToCheckoutEmailUpdateV2Resolver<TParent>;
    checkoutGiftCardApply?: MutationToCheckoutGiftCardApplyResolver<TParent>;
    checkoutGiftCardRemove?: MutationToCheckoutGiftCardRemoveResolver<TParent>;
    checkoutGiftCardRemoveV2?: MutationToCheckoutGiftCardRemoveV2Resolver<TParent>;
    checkoutGiftCardsAppend?: MutationToCheckoutGiftCardsAppendResolver<TParent>;
    checkoutLineItemsAdd?: MutationToCheckoutLineItemsAddResolver<TParent>;
    checkoutLineItemsRemove?: MutationToCheckoutLineItemsRemoveResolver<TParent>;
    checkoutLineItemsReplace?: MutationToCheckoutLineItemsReplaceResolver<TParent>;
    checkoutLineItemsUpdate?: MutationToCheckoutLineItemsUpdateResolver<TParent>;
    checkoutShippingAddressUpdate?: MutationToCheckoutShippingAddressUpdateResolver<TParent>;
    checkoutShippingAddressUpdateV2?: MutationToCheckoutShippingAddressUpdateV2Resolver<TParent>;
    checkoutShippingLineUpdate?: MutationToCheckoutShippingLineUpdateResolver<TParent>;
    customerAccessTokenCreate?: MutationToCustomerAccessTokenCreateResolver<TParent>;
    customerAccessTokenCreateWithMultipass?: MutationToCustomerAccessTokenCreateWithMultipassResolver<TParent>;
    customerAccessTokenDelete?: MutationToCustomerAccessTokenDeleteResolver<TParent>;
    customerAccessTokenRenew?: MutationToCustomerAccessTokenRenewResolver<TParent>;
    customerActivate?: MutationToCustomerActivateResolver<TParent>;
    customerActivateByUrl?: MutationToCustomerActivateByUrlResolver<TParent>;
    customerAddressCreate?: MutationToCustomerAddressCreateResolver<TParent>;
    customerAddressDelete?: MutationToCustomerAddressDeleteResolver<TParent>;
    customerAddressUpdate?: MutationToCustomerAddressUpdateResolver<TParent>;
    customerCreate?: MutationToCustomerCreateResolver<TParent>;
    customerDefaultAddressUpdate?: MutationToCustomerDefaultAddressUpdateResolver<TParent>;
    customerRecover?: MutationToCustomerRecoverResolver<TParent>;
    customerReset?: MutationToCustomerResetResolver<TParent>;
    customerResetByUrl?: MutationToCustomerResetByUrlResolver<TParent>;
    customerUpdate?: MutationToCustomerUpdateResolver<TParent>;
  }
  
  export interface MutationToCheckoutAttributesUpdateArgs {
    checkoutId: string;
    input: CheckoutAttributesUpdateInput;
  }
  export interface MutationToCheckoutAttributesUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutAttributesUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutAttributesUpdateV2Args {
    checkoutId: string;
    input: CheckoutAttributesUpdateV2Input;
  }
  export interface MutationToCheckoutAttributesUpdateV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutAttributesUpdateV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCompleteFreeArgs {
    checkoutId: string;
  }
  export interface MutationToCheckoutCompleteFreeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCompleteFreeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCompleteWithCreditCardArgs {
    checkoutId: string;
    payment: CreditCardPaymentInput;
  }
  export interface MutationToCheckoutCompleteWithCreditCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCompleteWithCreditCardArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCompleteWithCreditCardV2Args {
    checkoutId: string;
    payment: CreditCardPaymentInputV2;
  }
  export interface MutationToCheckoutCompleteWithCreditCardV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCompleteWithCreditCardV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCompleteWithTokenizedPaymentArgs {
    checkoutId: string;
    payment: TokenizedPaymentInput;
  }
  export interface MutationToCheckoutCompleteWithTokenizedPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCompleteWithTokenizedPaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCompleteWithTokenizedPaymentV2Args {
    checkoutId: string;
    payment: TokenizedPaymentInputV2;
  }
  export interface MutationToCheckoutCompleteWithTokenizedPaymentV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCompleteWithTokenizedPaymentV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCompleteWithTokenizedPaymentV3Args {
    checkoutId: string;
    payment: TokenizedPaymentInputV3;
  }
  export interface MutationToCheckoutCompleteWithTokenizedPaymentV3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCompleteWithTokenizedPaymentV3Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCreateArgs {
    input: CheckoutCreateInput;
  }
  export interface MutationToCheckoutCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCustomerAssociateArgs {
    checkoutId: string;
    customerAccessToken: string;
  }
  export interface MutationToCheckoutCustomerAssociateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCustomerAssociateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCustomerAssociateV2Args {
    checkoutId: string;
    customerAccessToken: string;
  }
  export interface MutationToCheckoutCustomerAssociateV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCustomerAssociateV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCustomerDisassociateArgs {
    checkoutId: string;
  }
  export interface MutationToCheckoutCustomerDisassociateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCustomerDisassociateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutCustomerDisassociateV2Args {
    checkoutId: string;
  }
  export interface MutationToCheckoutCustomerDisassociateV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutCustomerDisassociateV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutDiscountCodeApplyArgs {
    discountCode: string;
    checkoutId: string;
  }
  export interface MutationToCheckoutDiscountCodeApplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutDiscountCodeApplyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutDiscountCodeApplyV2Args {
    discountCode: string;
    checkoutId: string;
  }
  export interface MutationToCheckoutDiscountCodeApplyV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutDiscountCodeApplyV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutDiscountCodeRemoveArgs {
    checkoutId: string;
  }
  export interface MutationToCheckoutDiscountCodeRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutDiscountCodeRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutEmailUpdateArgs {
    checkoutId: string;
    email: string;
  }
  export interface MutationToCheckoutEmailUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutEmailUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutEmailUpdateV2Args {
    checkoutId: string;
    email: string;
  }
  export interface MutationToCheckoutEmailUpdateV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutEmailUpdateV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutGiftCardApplyArgs {
    giftCardCode: string;
    checkoutId: string;
  }
  export interface MutationToCheckoutGiftCardApplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutGiftCardApplyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutGiftCardRemoveArgs {
    appliedGiftCardId: string;
    checkoutId: string;
  }
  export interface MutationToCheckoutGiftCardRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutGiftCardRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutGiftCardRemoveV2Args {
    appliedGiftCardId: string;
    checkoutId: string;
  }
  export interface MutationToCheckoutGiftCardRemoveV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutGiftCardRemoveV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutGiftCardsAppendArgs {
    giftCardCodes: Array<string>;
    checkoutId: string;
  }
  export interface MutationToCheckoutGiftCardsAppendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutGiftCardsAppendArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutLineItemsAddArgs {
    lineItems: Array<CheckoutLineItemInput>;
    checkoutId: string;
  }
  export interface MutationToCheckoutLineItemsAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutLineItemsAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutLineItemsRemoveArgs {
    checkoutId: string;
    lineItemIds: Array<string>;
  }
  export interface MutationToCheckoutLineItemsRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutLineItemsRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutLineItemsReplaceArgs {
    lineItems: Array<CheckoutLineItemInput>;
    checkoutId: string;
  }
  export interface MutationToCheckoutLineItemsReplaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutLineItemsReplaceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutLineItemsUpdateArgs {
    checkoutId: string;
    lineItems: Array<CheckoutLineItemUpdateInput>;
  }
  export interface MutationToCheckoutLineItemsUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutLineItemsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutShippingAddressUpdateArgs {
    shippingAddress: MailingAddressInput;
    checkoutId: string;
  }
  export interface MutationToCheckoutShippingAddressUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutShippingAddressUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutShippingAddressUpdateV2Args {
    shippingAddress: MailingAddressInput;
    checkoutId: string;
  }
  export interface MutationToCheckoutShippingAddressUpdateV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutShippingAddressUpdateV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutShippingLineUpdateArgs {
    checkoutId: string;
    shippingRateHandle: string;
  }
  export interface MutationToCheckoutShippingLineUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutShippingLineUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAccessTokenCreateArgs {
    input: CustomerAccessTokenCreateInput;
  }
  export interface MutationToCustomerAccessTokenCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAccessTokenCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAccessTokenCreateWithMultipassArgs {
    multipassToken: string;
  }
  export interface MutationToCustomerAccessTokenCreateWithMultipassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAccessTokenCreateWithMultipassArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAccessTokenDeleteArgs {
    customerAccessToken: string;
  }
  export interface MutationToCustomerAccessTokenDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAccessTokenDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAccessTokenRenewArgs {
    customerAccessToken: string;
  }
  export interface MutationToCustomerAccessTokenRenewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAccessTokenRenewArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerActivateArgs {
    id: string;
    input: CustomerActivateInput;
  }
  export interface MutationToCustomerActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerActivateByUrlArgs {
    activationUrl: URL;
    password: string;
  }
  export interface MutationToCustomerActivateByUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerActivateByUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAddressCreateArgs {
    customerAccessToken: string;
    address: MailingAddressInput;
  }
  export interface MutationToCustomerAddressCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAddressCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAddressDeleteArgs {
    id: string;
    customerAccessToken: string;
  }
  export interface MutationToCustomerAddressDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAddressDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAddressUpdateArgs {
    customerAccessToken: string;
    id: string;
    address: MailingAddressInput;
  }
  export interface MutationToCustomerAddressUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAddressUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerCreateArgs {
    input: CustomerCreateInput;
  }
  export interface MutationToCustomerCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerDefaultAddressUpdateArgs {
    customerAccessToken: string;
    addressId: string;
  }
  export interface MutationToCustomerDefaultAddressUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerDefaultAddressUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerRecoverArgs {
    email: string;
  }
  export interface MutationToCustomerRecoverResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerRecoverArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerResetArgs {
    id: string;
    input: CustomerResetInput;
  }
  export interface MutationToCustomerResetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerResetArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerResetByUrlArgs {
    resetUrl: URL;
    password: string;
  }
  export interface MutationToCustomerResetByUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerResetByUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerUpdateArgs {
    customerAccessToken: string;
    customer: CustomerUpdateInput;
  }
  export interface MutationToCustomerUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutAttributesUpdatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutAttributesUpdatePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutAttributesUpdatePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutAttributesUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutAttributesUpdatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutAttributesUpdatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutAttributesUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutUserErrorTypeResolver<TParent = any> {
    code?: CheckoutUserErrorToCodeResolver<TParent>;
    field?: CheckoutUserErrorToFieldResolver<TParent>;
    message?: CheckoutUserErrorToMessageResolver<TParent>;
  }
  
  export interface CheckoutUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DisplayableErrorTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CheckoutUserError' | 'UserError' | 'CustomerUserError';
  }
  export interface UserErrorTypeResolver<TParent = any> {
    field?: UserErrorToFieldResolver<TParent>;
    message?: UserErrorToMessageResolver<TParent>;
  }
  
  export interface UserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutAttributesUpdateV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutAttributesUpdateV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutAttributesUpdateV2PayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutAttributesUpdateV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutAttributesUpdateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutAttributesUpdateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutAttributesUpdateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteFreePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCompleteFreePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCompleteFreePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutCompleteFreePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCompleteFreePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteFreePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteFreePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardPayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCompleteWithCreditCardPayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCompleteWithCreditCardPayloadToCheckoutUserErrorsResolver<TParent>;
    payment?: CheckoutCompleteWithCreditCardPayloadToPaymentResolver<TParent>;
    userErrors?: CheckoutCompleteWithCreditCardPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCompleteWithCreditCardPayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardPayloadToPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTypeResolver<TParent = any> {
    amount?: PaymentToAmountResolver<TParent>;
    amountV2?: PaymentToAmountV2Resolver<TParent>;
    billingAddress?: PaymentToBillingAddressResolver<TParent>;
    checkout?: PaymentToCheckoutResolver<TParent>;
    creditCard?: PaymentToCreditCardResolver<TParent>;
    errorMessage?: PaymentToErrorMessageResolver<TParent>;
    id?: PaymentToIdResolver<TParent>;
    idempotencyKey?: PaymentToIdempotencyKeyResolver<TParent>;
    nextActionUrl?: PaymentToNextActionUrlResolver<TParent>;
    ready?: PaymentToReadyResolver<TParent>;
    test?: PaymentToTestResolver<TParent>;
    transaction?: PaymentToTransactionResolver<TParent>;
  }
  
  export interface PaymentToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToAmountV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToCreditCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToErrorMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToIdempotencyKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToNextActionUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentToTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardTypeResolver<TParent = any> {
    brand?: CreditCardToBrandResolver<TParent>;
    expiryMonth?: CreditCardToExpiryMonthResolver<TParent>;
    expiryYear?: CreditCardToExpiryYearResolver<TParent>;
    firstDigits?: CreditCardToFirstDigitsResolver<TParent>;
    firstName?: CreditCardToFirstNameResolver<TParent>;
    lastDigits?: CreditCardToLastDigitsResolver<TParent>;
    lastName?: CreditCardToLastNameResolver<TParent>;
    maskedNumber?: CreditCardToMaskedNumberResolver<TParent>;
  }
  
  export interface CreditCardToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardToExpiryMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardToExpiryYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardToFirstDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardToLastDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CreditCardToMaskedNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionTypeResolver<TParent = any> {
    amount?: TransactionToAmountResolver<TParent>;
    amountV2?: TransactionToAmountV2Resolver<TParent>;
    kind?: TransactionToKindResolver<TParent>;
    status?: TransactionToStatusResolver<TParent>;
    statusV2?: TransactionToStatusV2Resolver<TParent>;
    test?: TransactionToTestResolver<TParent>;
  }
  
  export interface TransactionToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionToAmountV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionToKindResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionToStatusV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCompleteWithCreditCardV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCompleteWithCreditCardV2PayloadToCheckoutUserErrorsResolver<TParent>;
    payment?: CheckoutCompleteWithCreditCardV2PayloadToPaymentResolver<TParent>;
    userErrors?: CheckoutCompleteWithCreditCardV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCompleteWithCreditCardV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardV2PayloadToPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithCreditCardV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentPayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCompleteWithTokenizedPaymentPayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCompleteWithTokenizedPaymentPayloadToCheckoutUserErrorsResolver<TParent>;
    payment?: CheckoutCompleteWithTokenizedPaymentPayloadToPaymentResolver<TParent>;
    userErrors?: CheckoutCompleteWithTokenizedPaymentPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentPayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentPayloadToPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCompleteWithTokenizedPaymentV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCompleteWithTokenizedPaymentV2PayloadToCheckoutUserErrorsResolver<TParent>;
    payment?: CheckoutCompleteWithTokenizedPaymentV2PayloadToPaymentResolver<TParent>;
    userErrors?: CheckoutCompleteWithTokenizedPaymentV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV2PayloadToPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV3PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutUserErrorsResolver<TParent>;
    payment?: CheckoutCompleteWithTokenizedPaymentV3PayloadToPaymentResolver<TParent>;
    userErrors?: CheckoutCompleteWithTokenizedPaymentV3PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCompleteWithTokenizedPaymentV3PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCreatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCreatePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCreatePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCreatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCreatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerAssociatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCustomerAssociatePayloadToCheckoutResolver<TParent>;
    customer?: CheckoutCustomerAssociatePayloadToCustomerResolver<TParent>;
    userErrors?: CheckoutCustomerAssociatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCustomerAssociatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerAssociatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerAssociatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerAssociateV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCustomerAssociateV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCustomerAssociateV2PayloadToCheckoutUserErrorsResolver<TParent>;
    customer?: CheckoutCustomerAssociateV2PayloadToCustomerResolver<TParent>;
    userErrors?: CheckoutCustomerAssociateV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCustomerAssociateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerAssociateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerAssociateV2PayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerAssociateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerDisassociatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCustomerDisassociatePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCustomerDisassociatePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutCustomerDisassociatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCustomerDisassociatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerDisassociatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerDisassociatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerDisassociateV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutCustomerDisassociateV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutCustomerDisassociateV2PayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutCustomerDisassociateV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutCustomerDisassociateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerDisassociateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutCustomerDisassociateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeApplyPayloadTypeResolver<TParent = any> {
    checkout?: CheckoutDiscountCodeApplyPayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutDiscountCodeApplyPayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutDiscountCodeApplyPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutDiscountCodeApplyPayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeApplyPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeApplyPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeApplyV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutDiscountCodeApplyV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutDiscountCodeApplyV2PayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutDiscountCodeApplyV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutDiscountCodeApplyV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeApplyV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeApplyV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeRemovePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutDiscountCodeRemovePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutDiscountCodeRemovePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutDiscountCodeRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutDiscountCodeRemovePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeRemovePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutDiscountCodeRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutEmailUpdatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutEmailUpdatePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutEmailUpdatePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutEmailUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutEmailUpdatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutEmailUpdatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutEmailUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutEmailUpdateV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutEmailUpdateV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutEmailUpdateV2PayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutEmailUpdateV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutEmailUpdateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutEmailUpdateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutEmailUpdateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardApplyPayloadTypeResolver<TParent = any> {
    checkout?: CheckoutGiftCardApplyPayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutGiftCardApplyPayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutGiftCardApplyPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutGiftCardApplyPayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardApplyPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardApplyPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardRemovePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutGiftCardRemovePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutGiftCardRemovePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutGiftCardRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutGiftCardRemovePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardRemovePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardRemoveV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutGiftCardRemoveV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutGiftCardRemoveV2PayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutGiftCardRemoveV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutGiftCardRemoveV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardRemoveV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardRemoveV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardsAppendPayloadTypeResolver<TParent = any> {
    checkout?: CheckoutGiftCardsAppendPayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutGiftCardsAppendPayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutGiftCardsAppendPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutGiftCardsAppendPayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardsAppendPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutGiftCardsAppendPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsAddPayloadTypeResolver<TParent = any> {
    checkout?: CheckoutLineItemsAddPayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutLineItemsAddPayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutLineItemsAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutLineItemsAddPayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsAddPayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsRemovePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutLineItemsRemovePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutLineItemsRemovePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutLineItemsRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutLineItemsRemovePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsRemovePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsReplacePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutLineItemsReplacePayloadToCheckoutResolver<TParent>;
    userErrors?: CheckoutLineItemsReplacePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutLineItemsReplacePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsReplacePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsUpdatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutLineItemsUpdatePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutLineItemsUpdatePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutLineItemsUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutLineItemsUpdatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsUpdatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutLineItemsUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingAddressUpdatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutShippingAddressUpdatePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutShippingAddressUpdatePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutShippingAddressUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutShippingAddressUpdatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingAddressUpdatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingAddressUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingAddressUpdateV2PayloadTypeResolver<TParent = any> {
    checkout?: CheckoutShippingAddressUpdateV2PayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutShippingAddressUpdateV2PayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutShippingAddressUpdateV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutShippingAddressUpdateV2PayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingAddressUpdateV2PayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingAddressUpdateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingLineUpdatePayloadTypeResolver<TParent = any> {
    checkout?: CheckoutShippingLineUpdatePayloadToCheckoutResolver<TParent>;
    checkoutUserErrors?: CheckoutShippingLineUpdatePayloadToCheckoutUserErrorsResolver<TParent>;
    userErrors?: CheckoutShippingLineUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutShippingLineUpdatePayloadToCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingLineUpdatePayloadToCheckoutUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutShippingLineUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenCreatePayloadTypeResolver<TParent = any> {
    customerAccessToken?: CustomerAccessTokenCreatePayloadToCustomerAccessTokenResolver<TParent>;
    customerUserErrors?: CustomerAccessTokenCreatePayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerAccessTokenCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAccessTokenCreatePayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenCreatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenTypeResolver<TParent = any> {
    accessToken?: CustomerAccessTokenToAccessTokenResolver<TParent>;
    expiresAt?: CustomerAccessTokenToExpiresAtResolver<TParent>;
  }
  
  export interface CustomerAccessTokenToAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenToExpiresAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUserErrorTypeResolver<TParent = any> {
    code?: CustomerUserErrorToCodeResolver<TParent>;
    field?: CustomerUserErrorToFieldResolver<TParent>;
    message?: CustomerUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenCreateWithMultipassPayloadTypeResolver<TParent = any> {
    customerAccessToken?: CustomerAccessTokenCreateWithMultipassPayloadToCustomerAccessTokenResolver<TParent>;
    customerUserErrors?: CustomerAccessTokenCreateWithMultipassPayloadToCustomerUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAccessTokenCreateWithMultipassPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenCreateWithMultipassPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenDeletePayloadTypeResolver<TParent = any> {
    deletedAccessToken?: CustomerAccessTokenDeletePayloadToDeletedAccessTokenResolver<TParent>;
    deletedCustomerAccessTokenId?: CustomerAccessTokenDeletePayloadToDeletedCustomerAccessTokenIdResolver<TParent>;
    userErrors?: CustomerAccessTokenDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAccessTokenDeletePayloadToDeletedAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenDeletePayloadToDeletedCustomerAccessTokenIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenRenewPayloadTypeResolver<TParent = any> {
    customerAccessToken?: CustomerAccessTokenRenewPayloadToCustomerAccessTokenResolver<TParent>;
    userErrors?: CustomerAccessTokenRenewPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAccessTokenRenewPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccessTokenRenewPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerActivatePayloadTypeResolver<TParent = any> {
    customer?: CustomerActivatePayloadToCustomerResolver<TParent>;
    customerAccessToken?: CustomerActivatePayloadToCustomerAccessTokenResolver<TParent>;
    customerUserErrors?: CustomerActivatePayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerActivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerActivatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerActivatePayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerActivatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerActivateByUrlPayloadTypeResolver<TParent = any> {
    customer?: CustomerActivateByUrlPayloadToCustomerResolver<TParent>;
    customerAccessToken?: CustomerActivateByUrlPayloadToCustomerAccessTokenResolver<TParent>;
    customerUserErrors?: CustomerActivateByUrlPayloadToCustomerUserErrorsResolver<TParent>;
  }
  
  export interface CustomerActivateByUrlPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerActivateByUrlPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerActivateByUrlPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressCreatePayloadTypeResolver<TParent = any> {
    customerAddress?: CustomerAddressCreatePayloadToCustomerAddressResolver<TParent>;
    customerUserErrors?: CustomerAddressCreatePayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerAddressCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAddressCreatePayloadToCustomerAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressCreatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressDeletePayloadTypeResolver<TParent = any> {
    customerUserErrors?: CustomerAddressDeletePayloadToCustomerUserErrorsResolver<TParent>;
    deletedCustomerAddressId?: CustomerAddressDeletePayloadToDeletedCustomerAddressIdResolver<TParent>;
    userErrors?: CustomerAddressDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAddressDeletePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressDeletePayloadToDeletedCustomerAddressIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressUpdatePayloadTypeResolver<TParent = any> {
    customerAddress?: CustomerAddressUpdatePayloadToCustomerAddressResolver<TParent>;
    customerUserErrors?: CustomerAddressUpdatePayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerAddressUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAddressUpdatePayloadToCustomerAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressUpdatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddressUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreatePayloadTypeResolver<TParent = any> {
    customer?: CustomerCreatePayloadToCustomerResolver<TParent>;
    customerUserErrors?: CustomerCreatePayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerCreatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerDefaultAddressUpdatePayloadTypeResolver<TParent = any> {
    customer?: CustomerDefaultAddressUpdatePayloadToCustomerResolver<TParent>;
    customerUserErrors?: CustomerDefaultAddressUpdatePayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerDefaultAddressUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerDefaultAddressUpdatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerDefaultAddressUpdatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerDefaultAddressUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRecoverPayloadTypeResolver<TParent = any> {
    customerUserErrors?: CustomerRecoverPayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerRecoverPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerRecoverPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRecoverPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetPayloadTypeResolver<TParent = any> {
    customer?: CustomerResetPayloadToCustomerResolver<TParent>;
    customerAccessToken?: CustomerResetPayloadToCustomerAccessTokenResolver<TParent>;
    customerUserErrors?: CustomerResetPayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerResetPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerResetPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetByUrlPayloadTypeResolver<TParent = any> {
    customer?: CustomerResetByUrlPayloadToCustomerResolver<TParent>;
    customerAccessToken?: CustomerResetByUrlPayloadToCustomerAccessTokenResolver<TParent>;
    customerUserErrors?: CustomerResetByUrlPayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerResetByUrlPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerResetByUrlPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetByUrlPayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetByUrlPayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerResetByUrlPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdatePayloadTypeResolver<TParent = any> {
    customer?: CustomerUpdatePayloadToCustomerResolver<TParent>;
    customerAccessToken?: CustomerUpdatePayloadToCustomerAccessTokenResolver<TParent>;
    customerUserErrors?: CustomerUpdatePayloadToCustomerUserErrorsResolver<TParent>;
    userErrors?: CustomerUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerUpdatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdatePayloadToCustomerAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdatePayloadToCustomerUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: AutomaticDiscountApplicationToAllocationMethodResolver<TParent>;
    targetSelection?: AutomaticDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: AutomaticDiscountApplicationToTargetTypeResolver<TParent>;
    title?: AutomaticDiscountApplicationToTitleResolver<TParent>;
    value?: AutomaticDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface AutomaticDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationTypeResolver<TParent = any> {
    allocationMethod?: DiscountCodeApplicationToAllocationMethodResolver<TParent>;
    applicable?: DiscountCodeApplicationToApplicableResolver<TParent>;
    code?: DiscountCodeApplicationToCodeResolver<TParent>;
    targetSelection?: DiscountCodeApplicationToTargetSelectionResolver<TParent>;
    targetType?: DiscountCodeApplicationToTargetTypeResolver<TParent>;
    value?: DiscountCodeApplicationToValueResolver<TParent>;
  }
  
  export interface DiscountCodeApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToApplicableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoTypeResolver<TParent = any> {
    alt?: ExternalVideoToAltResolver<TParent>;
    embeddedUrl?: ExternalVideoToEmbeddedUrlResolver<TParent>;
    id?: ExternalVideoToIdResolver<TParent>;
    mediaContentType?: ExternalVideoToMediaContentTypeResolver<TParent>;
    previewImage?: ExternalVideoToPreviewImageResolver<TParent>;
  }
  
  export interface ExternalVideoToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToEmbeddedUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToPreviewImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: ManualDiscountApplicationToAllocationMethodResolver<TParent>;
    description?: ManualDiscountApplicationToDescriptionResolver<TParent>;
    targetSelection?: ManualDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: ManualDiscountApplicationToTargetTypeResolver<TParent>;
    title?: ManualDiscountApplicationToTitleResolver<TParent>;
    value?: ManualDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface ManualDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageTypeResolver<TParent = any> {
    alt?: MediaImageToAltResolver<TParent>;
    id?: MediaImageToIdResolver<TParent>;
    image?: MediaImageToImageResolver<TParent>;
    mediaContentType?: MediaImageToMediaContentTypeResolver<TParent>;
    previewImage?: MediaImageToPreviewImageResolver<TParent>;
  }
  
  export interface MediaImageToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToPreviewImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dTypeResolver<TParent = any> {
    alt?: Model3dToAltResolver<TParent>;
    id?: Model3dToIdResolver<TParent>;
    mediaContentType?: Model3dToMediaContentTypeResolver<TParent>;
    previewImage?: Model3dToPreviewImageResolver<TParent>;
    sources?: Model3dToSourcesResolver<TParent>;
  }
  
  export interface Model3dToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToPreviewImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceTypeResolver<TParent = any> {
    filesize?: Model3dSourceToFilesizeResolver<TParent>;
    format?: Model3dSourceToFormatResolver<TParent>;
    mimeType?: Model3dSourceToMimeTypeResolver<TParent>;
    url?: Model3dSourceToUrlResolver<TParent>;
  }
  
  export interface Model3dSourceToFilesizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceToFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceToMimeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: ScriptDiscountApplicationToAllocationMethodResolver<TParent>;
    description?: ScriptDiscountApplicationToDescriptionResolver<TParent>;
    targetSelection?: ScriptDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: ScriptDiscountApplicationToTargetTypeResolver<TParent>;
    title?: ScriptDiscountApplicationToTitleResolver<TParent>;
    value?: ScriptDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface ScriptDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoTypeResolver<TParent = any> {
    alt?: VideoToAltResolver<TParent>;
    id?: VideoToIdResolver<TParent>;
    mediaContentType?: VideoToMediaContentTypeResolver<TParent>;
    previewImage?: VideoToPreviewImageResolver<TParent>;
    sources?: VideoToSourcesResolver<TParent>;
  }
  
  export interface VideoToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToPreviewImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceTypeResolver<TParent = any> {
    format?: VideoSourceToFormatResolver<TParent>;
    height?: VideoSourceToHeightResolver<TParent>;
    mimeType?: VideoSourceToMimeTypeResolver<TParent>;
    url?: VideoSourceToUrlResolver<TParent>;
    width?: VideoSourceToWidthResolver<TParent>;
  }
  
  export interface VideoSourceToFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToMimeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Customer {
    token?: string 
  }
  